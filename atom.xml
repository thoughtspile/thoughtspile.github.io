<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vladimir Klepov as a Coder</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://thoughtspile.github.io/"/>
  <updated>2018-12-25T17:16:01.000Z</updated>
  <id>https://thoughtspile.github.io/</id>
  
  <author>
    <name>Vladimir Klepov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>5 Traps Awaiting a Newbie Teacher</title>
    <link href="https://thoughtspile.github.io/2018/12/25/teacher-notes/"/>
    <id>https://thoughtspile.github.io/2018/12/25/teacher-notes/</id>
    <published>2018-12-25T17:13:30.000Z</published>
    <updated>2018-12-25T17:16:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>It’s about time that I celebrate five years of teaching. At daytime, I lead a normal programmer’s life. But evenings and weekends, I don’t write more code, the way I’m supposed to — instead, I turn into a covert teacher (sometimes literally, when my contract prohibits part-time jobs). I have taught school mathematics, conversational english (and IELTS preparation!), C++ and JS programming and data analysis. Let me tell you how I got into this first.</p><p>Being a tutor is probably the job with the most bang for your buck in Russia. The market is enormous given the popular belief that not going to a university (even if that’s a major in philology from Higher State University of Toilet Construction and Design) limits your career choices to carrying boxes around (OK, maybe you get to drive a truck). And the entry qualification for a tutor — well, if you’re a university student yourself, and have several hours a week to spare, you’re good to go. And the hourly pay (if you’re convincing) is about how much you can make as a web developer. It’s insane not to hop in.</p><p>One of the things that seems to scare people off teaching is the big talk surrounding education. There are “second mothers”, whom we “trust with our kids”, doing a “mission”, not a job. That’s for selfless martyrs fighting the battle for the future of humanity, not for you, don’t even get close. Over the years, I’ve discovered education to be a normal industry with a healthy amount of money rolling around — people love learning, and the governments are happy to throw a bit in there, too. It’s a good job.</p><p>Here, I’ve put together a list of things I learnt over these years. They seem common-sense, yet I find myself breaking them all the time — you really need self-control. To make me feel better, supposedly established education professionals do fall into these traps, too. Let’s go.</p><h1 id="Your-goal-is-to-teach"><a href="#Your-goal-is-to-teach" class="headerlink" title="Your goal is to teach"></a>Your goal is to teach</h1><p>As a teacher, you should teach — no more, no less. You help people do something they couldn’t do before. This should be pretty simple, but I see people fail to understand this, time after time. The failure comes in two flavours.</p><p>Boosting your self-esteem is not what you’re after. OK, you know the stuff you’re teaching, your students don’t — pretty much as expected, isn’t it? There’s no reason to point that out all the time. If you’ve been explaining something for the past hour, but failed to get it through to the student — you’re the stupid one here, because you haven’t done your job of explaining well.</p><p>Luckily, this simple rule also frees you from the extra job. Being a motivation coach, a therapist or a buddy to your students is completely optional. If someone decides they’re better off not knowing whatever you have to teach — fine, you don’t have a moral obligation to show them the right path. Yes, some people do not want whatever it is that you have to offer. They could, but they don’t. Life goes on.</p><h1 id="You-have-no-idea-what-is-obvious"><a href="#You-have-no-idea-what-is-obvious" class="headerlink" title="You have no idea what is obvious"></a>You have no idea what is obvious</h1><p>As a specialist, you find some things obvious, but your students don’t necessarily share this view. Whenever you assume people know <em>a very-basic-thing</em>, someone will surprise you in a most unexpected way. The worst thing is you can’t plan for it, precisely because it’s so obvious to you when you’re planning the course.</p><p>Here’s how I got burnt with it. I was teaching data analysis to second year CS students, and, introducing the homework, I made a remark: “save the results into JSON, then load them”. Next thing I know — I have 5 hand-written JSON parsers. I somewhat understand how it came about — when you spend a year writing parsers and studying grammars, everything looks like a parser. Since then I always devote 15 minutes in the beginning of my courses to using standard JSON module, back and forth, until the students feel I think they’re idiots. I don’t, I’m just cautious.</p><p>Now, a turn-around with me on the opposite end: during my final year at the university, we had a class on computer architecture. The lecturer was a cool and knowledgeable fellow working in the industry. The class normally went as follows: “Look and repeat: we open the terminal, create a folder, open vim, write assembly code, compile it, write more assembly, recomplile, do more CLI manipulations, <em>et voila</em> — we’ve just written an operating system!” Except that for me it was more like “I did it! I did it! I know how to create a folder! And I can exit vim!” (by the way, that’s <code>esc</code>, just to make sure, then <code>shift + Z + Z</code> — very useful). Watching someone write assembly at that speed is very entertaining by itself, but I still don’t know much about computer architecture.</p><p>Frankly, I don’t know how to solve this problem, once and for all. Watch out for the moment when the students stop understanding, ask if everything is clear (they might not want to admin — be insistent), and plan your lessons with a time reserve for unforeseen explanations.</p><h1 id="You-have-to-lie-all-the-time"><a href="#You-have-to-lie-all-the-time" class="headerlink" title="You have to lie all the time"></a>You have to lie all the time</h1><p>Teaching is the art of deception. With your knowledge in the field, you tend to get carried far away, into the land of obscure details and edge cases. These asides, no matter how fun they may be for you, rarely add anything to your students’ knowledge. Stay brief and go with the short and simple, even if not technically true, answers.</p><p>Let’s go though some examples of good vs bad answers together:</p><ul><li>Can I divide by zero? <em>good:</em> No way! <em>bad:</em> Strictly speaking, no, but you can instead take a limit of f(x) / x as x approaches zero, which might have a value, which you can use to complete the definition at zero, so that you have effectively divided by zero. Oddly enough, certain functions can be said to have <em>any</em> value at zero… (to be continued)</li><li>Should I use functions, or just copy and paste my code? <em>good:</em> Use functions, Don’t Repeat Yourself. <em>bad:</em> Probably functions, but, depending on the situation, copy-paste can be fine, especially for shorter snippets. You have to plan for expanding your codebase. Sometimes, if your logic is stateful, using classes can be more convenient. Lisp and some other languages also have marcos… (ends up explaining monads)</li><li>What does “корова” mean? <em>good:</em> That’s “cow”. <em>bad:</em> This depends on the context. — Oh, in that case, it’s “cow”, but you can also hear it used as an obscenity, implying that the person is overweight, which is not necessarily true. And there is also a Soviet candy called “коровка”, which is “little cow”, similar to toffee (an hour of discussing sweets and the history of the Eastern Bloc).</li></ul><p>Hope you get the idea. There’s nothing wrong with in-depth explanations, as long as you’re sure the student hasn’t lost track of where you are, and you have nothing more appropriate to teach.</p><h1 id="Teaching-stuff-you-don’t-know-well-is-cool"><a href="#Teaching-stuff-you-don’t-know-well-is-cool" class="headerlink" title="Teaching stuff you don’t know well is cool"></a>Teaching stuff you don’t know well is cool</h1><p>Nothing scares people more than the prospect of teaching something they have no experience with. Say, you work with React, but get an offer to teach Vue. No way, you don’t know Vue, do you? Don’t be scared, it’s going to be fine. You’ll need more time to prepare for the class, but otherwise, it’s even better than teaching what you excel at. Here’s why:</p><ul><li>Your explanations may actually be clearer, since you’ve literally just seen it explained.</li><li>You get to learn something new, for free, with an excellent motivation of not having your students see you fail.</li><li>The students won’t tell you from an expert working in the area his whole life. As long as you take your time to prepare and be an inch above the students, you’re delivering value.</li><li>Less risk of falling into the “excessively detailed explanation” trap shown above. Not knowing that many obscure details is the best way not to get lost in them. Just take care and don’t converge to explaining the stuff you know instead of the original answer.</li></ul><p>Of course, this does not allow you to teach civil engineering instead of graphic design — that would be fraud. But learning a new library or framework, or linear regression instead of natural language processing should be fine. Don’t take my word on this — here’s a book called <a href="https://www.goodreads.com/book/show/7300305-teaching-what-you-don-t-know" target="_blank" rel="noopener">“Teaching What You Don’t Know”</a>. Motivational food for thought? Great — are football coaches the best footballers in their team (we probably have different ideas of “football”, but that’s not the point)? Not likely. Are school math teachers renowned mathematicians? Very unlikely.</p><h1 id="You-don’t-have-to-know-everything"><a href="#You-don’t-have-to-know-everything" class="headerlink" title="You don’t have to know everything"></a>You don’t have to know everything</h1><p>Sometimes students will ask you a question, and you have no idea what the answer is. No need to worry — you’re just a person, not God Almighty, and (hopefully) you never pretended to be one. Just say you don’t know, then try to work out the answer together. If you’re concerned your student would lose respect for you over this incident — keep calm, they won’t. If anything, it’s the other way around — they’ll feel something’s off when you start evading the question using smart talk. Let me pull my answer-along trick again:</p><ul><li>How do I say “smartass” in Spanish? <em>good:</em> I have no idea. Why don’t you look it up and tell us the next time? <em>bad:</em> Literally, that would be “El culo inteligente”. You should refrain from using terms like that in all situations but the most informal ones. Now let’s move away from this unacceptable question.</li><li>Why is my code not working? <em>good:</em> I don’t know — what does the error message say? <em>bad:</em> Because you wrote code that does not work. As a programmer, you will be routinely presented with cahlleneges like this, and if your code stops working in production, this may result in significant damage. To prevent this from happening, you should write unit tests, or, even better, use test-driven development.</li><li>Can sum of squares be a prime number? <em>good:</em> Interesting! Maybe, but I’m not sure. I’ll check it out and tell you at the next lesson. <em>bad:</em> Gödel’s first incompleteness theorem states that no consistent system of axioms whose theorems can be listed by an effective procedure is capable of proving all truths about the arithmetic of the natural numbers. For any such consistent formal system, there will always be statements about the natural numbers that are true, but that are unprovable within the system. The second incompleteness theorem, an extension of the first, shows that the system cannot demonstrate its own consistency. Hope this clarifies the matter for those of you who are still capable of thinking for yourself.</li></ul><p>As you may see, the desire to look smart and all-knowing results in answers similar to the “excessively detailed” ones. Even worse, you haven’t answered the original question. If this teaches anything, that’s avoiding uncomfortable questions using big talk — not a useless life skill, but is that really what you were after? In the worst case, it teaches your students not to ask you any questions, which still sucks.</p><hr><p>Do you have any fun stories, or more “traps” like this to share? Be sure to drop them into the comments here or on reddit!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It’s about time that I celebrate five years of teaching. At daytime, I lead a normal programmer’s life. But evenings and weekends, I don’
      
    
    </summary>
    
    
      <category term="life" scheme="https://thoughtspile.github.io/tags/life/"/>
    
      <category term="thoughtspile" scheme="https://thoughtspile.github.io/tags/thoughtspile/"/>
    
      <category term="teaching" scheme="https://thoughtspile.github.io/tags/teaching/"/>
    
  </entry>
  
  <entry>
    <title>10 Design Rules for Programmers</title>
    <link href="https://thoughtspile.github.io/2018/12/17/design-crash-course/"/>
    <id>https://thoughtspile.github.io/2018/12/17/design-crash-course/</id>
    <published>2018-12-17T14:10:23.000Z</published>
    <updated>2018-12-17T13:06:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>For some reason, many developers disdain design. We are programmers, we are smart and rational, and we think technically. Designers are weird and artistic, they wear black sweaters and long scarves, they are no match to us. I never quite understood how you can ignore design if you do any front-end job.</p><p>Knowing core design principles will help you understand <em>why</em> your designer did what he did, will allow you to spot and fix “design typos”, and will also go great lengths to freeing you from pixel-perfect layout slavery. Also, if you ever land in a team without a designer, your product might not make users’ eyes bleed.</p><p>These rules are fundamental, and not related to <em>web</em> design specifically: use them for documents, presentations, posters — anything you want. Good design does not necessarily mean beautiful; your primary goal is to get information through to someone, and this is exactly where design helps. Just 10 simple rules (OK, to be honest, it’s 5 simple rules, 2 difficult rules and 3 tricks to cover-up your mess) — let’s go.</p><h2 id="1-Layout"><a href="#1-Layout" class="headerlink" title="1. Layout"></a>1. Layout</h2><p>Layout does not only refer to CSS, but also to the overall arrangement of things on the page. It should guide your way whether you’re working with text, images, controls or color blocks. If you’re getting bored reading this, please get bored <em>after</em> this section, as it’s crucial.</p><h3 id="1-1-Align-things"><a href="#1-1-Align-things" class="headerlink" title="1.1. Align things"></a>1.1. Align things</h3><p>Our brains love order. Even if you live in a messy apartment, loathe military and corporations, and watch Jean-Luc Godard every day, your brain still enjoys order a great deal. The principal way of adding visual order (and thus pleasing the brain) is through alignment. When elements on your page have their boundaries misaligned, the overall design looks messy. When they lie on a common line, it looks sharp and nice.</p><p>Align left sides:</p><figure><br>  <img style="display: inline-block; max-width: 50%; vertical-align: top;" src="/images/design-rules/align-bad-2-gmail.png"><img style="display: inline-block; max-width: 50%; vertical-align: top;" src="/images/design-rules/align-good-2-yamail.png"><br>  <div style="color: #555; text-align: center;">Mobile Gmail alignment is very weird — look at that pyramid! We at Yandex.mail have done a much better job here.</div><br></figure><p>And also align the baselines:</p><figure><br>  <img style="display: block; width: 100%;" src="/images/design-rules/align-bad-3.png"><img style="display: block; width: 100%;" src="/images/design-rules/align-better-3.png"><br>  <div style="color: #555; text-align: center;">UX aside (are we searching in this category? are these even related?), it looks better aligned.</div><br></figure><h3 id="1-2-Level-up-align-things-visually"><a href="#1-2-Level-up-align-things-visually" class="headerlink" title="1.2. Level up: align things visually"></a>1.2. Level up: align things <em>visually</em></h3><p>Mechanically aligning the CSS boxes is not enough. Depending on the shape of an object, it may appear aligned when sitting to the left or to the right of the real alignment guide. Generally, rectangular things are fine right on that line, round things want to cross it a bit, and pointy things cross it even further. If you want a physical analogy, think of aligning objects’ centers of gravity, not the endpoints.</p><figure><br>  <img style="display: block; width: 100%;" src="/images/design-rules/align-good-1.png"><br>  <div style="color: #555; text-align: center;">Smart and clean design from DDG — note how the text is aligned, and the input padding hangs left.</div><br></figure><figure><br>  <img style="display: block; width: 100%;" src="/images/design-rules/align-good-3.png"><br>  <div style="color: #555; text-align: center;">See the pointy shield bottom hang below the baseline.</div><br></figure><h3 id="1-3-Don’t-crush-things-together"><a href="#1-3-Don’t-crush-things-together" class="headerlink" title="1.3. Don’t crush things together"></a>1.3. Don’t crush things together</h3><p>The single best way to make your design look amateurish is putting things too close together. I understand the motivation — you want more information to fit on the screen, or maybe the management just gave you one more menu item and you decided to stick it there since it <em>just fits</em>. The sad truth is, things crushed together look bad.</p><figure><br>  <img style="display: block; width: 100%;" src="/images/design-rules/whitespace-bad-1.jpg"><br>  <div style="color: #555; text-align: center;">Meh, why are the card paddings so tiny? Most of the time you’re tempted to use borders because the content is not spaced enough, and by “fixing” it you accidentally create a visual conflict instead.</div><br></figure><p>This is also the hardest point to formulate as a precise rule — I have no idea exacly how much space you should leave between which things. Just don’t be afraid to leave some parts of the screen blank. Move things around, ask your friends, and see what works. You’ll develop a sense for it over time.</p><figure><br>  <img style="display: block; width: 100%;" src="/images/design-rules/whitespace-bad-2.png"><br>  <img style="display: block; width: 100%;" src="/images/design-rules/whitespace-better-2.png"><br>  <div style="color: #555; text-align: center;">I understand the cues from phone book design, but it’s not that we can save money on paper when making a website. Also, the font size could be a bit larger — see below.</div><br></figure><h3 id="1-4-Level-up-move-unrelated-things-even-further-apart"><a href="#1-4-Level-up-move-unrelated-things-even-further-apart" class="headerlink" title="1.4. Level up: move unrelated things even further apart"></a>1.4. Level up: move unrelated things even further apart</h3><p>Tne distance between objects in your layout is the visual way of telling people what belongs together, and what is unrelated. The thought experiment to do here is: replace the text with grey rectangles — can you still tell which headers, captions and info blocks (or, simply put, grey rectangles) belong to which other items?</p><figure><br>  <img style="display: inline-block; max-width: 50%; vertical-align: top;" src="/images/design-rules/closeness-bad-1.png"><img style="display: inline-block; max-width: 50%; vertical-align: top;" src="/images/design-rules/closeness-better-1.png"><br>  <div style="color: #555; text-align: center;">This bold text is a caption for an image that failed to load — or is it? Nice combo with <em>too</em> much whitespace and inconsistent closeness. Quick fix — move the headers closer to the related section text.</div><br></figure><h2 id="2-Text"><a href="#2-Text" class="headerlink" title="2. Text"></a>2. Text</h2><p>Typography might not seem immediately applicable to a typical web application, but text plays a major role in content-based websites. These rules guide mostly the body text — you can skip it for headers, navigation links, form labels and other short items. This also depends on the font and the background, but we’d be going too deep for this post. Maybe next time.</p><h3 id="2-1-Opt-for-legibility-over-design"><a href="#2-1-Opt-for-legibility-over-design" class="headerlink" title="2.1. Opt for legibility over design"></a>2.1. Opt for legibility over design</h3><p>Yes, thin, grey and small letters for some reason look more sophisticated. However, when you actually intend the text to be read, go for legibility over <em>design</em> every day. That means:</p><ul><li>Font size that is readable on all screens. The 16px default works well, and never make body text smaller than 14px.</li><li>High contrast. Go for black text on white background. #333 would be the lightest possible, if you want to stretch it. If you decide to invert it (light text, dark background), make sure you have a good reason — “night mode” is about all I can think of.</li></ul><figure><br>  <img style="display: block; width: 100%;" src="/images/design-rules/contrast-bad-1.png"><br>  <div style="color: #555; text-align: center;">This greyish blue over greyish blue is too much even for 2 words.</div><br></figure><figure><br>  <img style="display: block; width: 100%;" src="/images/design-rules/contrast-bad-2.png"><br>  <div style="color: #555; text-align: center;">No, using grey text does not make you a cool designer.</div><br></figure><figure><br>  <img style="display: block; width: 100%;" src="/images/design-rules/contrast-bad-3.jpg"><br>  <div style="color: #555; text-align: center;">Using generic text for your designs is a straight way to fail here — no one reads it during the design phase.</div><br></figure><h3 id="2-2-Align-left"><a href="#2-2-Align-left" class="headerlink" title="2.2. Align left"></a>2.2. Align left</h3><p>There is one true alignment for the web, and that’s left alignment. People read from left to right, and it makes sense to help your readers’ eyes find the next line. Right and center alignment definitely don’t give you predictable line location.</p><p>But what about fitting text to width, you might ask? The books do it that way, and text blocks are nice and rectangular. True, but that requires hyphens — since the quantity of words on a line is not fixed, you have to stretch the spaces either between the words, or between the letters. The text becomes harder to read — the brain doesn’t know where to look for the next character. Hyphenation on the web kinda works, but usually puts a hyphen on each line — something you don’t see in books. TeX hyphenation is remarkably good, but we’re not there yet, and I don’t think it’s possible in real-time yet. Granted, this sin rarely appears in website design (thsnk god!), but keep it in mind when making documents.</p><figure><br>  <img style="display: block; width: 100%;" src="/images/design-rules/text-align-justify.jpg"><br>  <div style="color: #555; text-align: center;">Just look at these spaces jump!</div><br></figure><p>By now, relate the rules together: if you treat the lines as abstract blocks, this corresponds to the “adjust stuff” rule, and gives your design a cleaner appearance.</p><h3 id="2-3-Keep-line-length-around-60-characters"><a href="#2-3-Keep-line-length-around-60-characters" class="headerlink" title="2.3. Keep line length around 60 characters"></a>2.3. Keep line length around 60 characters</h3><p>With long lines, the readers quickly lose track of where they are on a line. With short lines, you have to move your eyes around too much. Also, left alignment + short lines leaves you with an overtly jarred right edge, because the word length varies. 50 to 70 characters works best.</p><figure><br>  <img style="display: block; width: 100%;" src="/images/design-rules/long-lines-3.png"><br>  <div style="color: #555; text-align: center;">Long lines make you super sleepy — I couldn’t force myslef to read this even for the sake of this post.</div><br></figure><p>If you can’t quite fit it there, try changing the font size. You can also bypass it for shorter text: 3 lines of 20 chars each is not a big deal.</p><h2 id="3-Notes-on-beauty"><a href="#3-Notes-on-beauty" class="headerlink" title="3. Notes on beauty"></a>3. Notes on beauty</h2><p>If you educate yourself on the above rules and consistently apply them to your designs, you’ll end up with bearable but boring pages. We’re getting dangerously deep here, but I find these three tips to give you most bang for your buck.</p><h3 id="3-1-Use-colors-the-smart-way"><a href="#3-1-Use-colors-the-smart-way" class="headerlink" title="3.1. Use colors the smart way"></a>3.1. Use colors the smart way</h3><p>The first thing people do when trying to make their design more <em>beautiful</em> is painting things into random colors. While some designers can pull it off on some occasions, thinking <em>you</em> can is arrogant. Restrict yourself to shades of grey for text and background and a bright accent color to highlight random things — you might want to use your corporate color here.</p><figure><br>  <img style="display: block; width: 100%;" src="/images/design-rules/dieter-rams.jpg"><br>  <div style="color: #555; text-align: center;">No need to pretend — we’re all under a big shadow of modernist design. <a href="https://hackernoon.com/dieter-rams-10-principles-of-good-design-e7790cc983e9" target="_blank" rel="noopener">Dieter Rams</a> here.</div><br></figure><p>You don’t even need all the shades of grey (no allusions here) — 7 (including white and black) is more than enough. Add more, and the users’ brains would run around trying to prioritize random grey colors that happen to be close by, then settle on the impression that this design is garbage.</p><p>If you want more colors, I really like the <a href="https://medium.com/eightshapes-llc/color-in-design-systems-a1c80f65fa3" target="_blank" rel="noopener">approach</a> design systems community has taken here with semantic color schemes. Basically, you define a set of action types, and consistently apply colors to them across the interface — think “red for destruction, green for creation” and further fun like “purple for drag-n-drop”.</p><h3 id="3-2-Every-interaction-is-better-with-an-animation"><a href="#3-2-Every-interaction-is-better-with-an-animation" class="headerlink" title="3.2. Every interaction is better with an animation"></a>3.2. Every interaction is better with an animation</h3><p>You don’t need to be a motion designer to slap a <code>transition: all 300ms ease</code> into your stylesheet. A sharp transition is harsh and old. An animated transition is smooth and pleasant. These values work particularly well by default — any shorter, and the transition is not noticeable, any longer and the transition becomes annoying.</p><p>If you develop for desktop, hover effects work nice. Hover styles by themselves have a reassuring effect on the user — the element is interactive, the mouse is in the right place. With a transition, it’s even better.</p><figure><br>  <style>.btn { line-height: 2; padding: 3px 20px; border-radius: 5px; background: #7d7; border: none; font-size: 20px; color: #111; margin-bottom: 10px; } .btn:active, .btn:focus { outline: none } .btn-hov:hover { background-color: #afa } .btn-trans { transition: all 300ms 0ms ease }</style><br>  <button class="btn">I am a dumb button. Am I even active?</button><br>  <button class="btn btn-hov">I am more usable but harsh</button><br>  <button class="btn btn-hov btn-trans">I am a pleasant button</button><br></figure><p>More generally, any transition that involves elements appearing from nowhere or disappearing look more natural with a transition. I know that means more React work —  for one, you have to delay unmounting — but trust me, it’s worth it.</p><h3 id="3-3-Everything-is-better-with-icons"><a href="#3-3-Everything-is-better-with-icons" class="headerlink" title="3.3. Everything is better with icons"></a>3.3. Everything is better with icons</h3><p>I’m not quite sure how it works, but text-only designs look, for lack of a better word, poor and amateurish. But drop some icons in there, and they become smart and professional! Maybe it’s that icons contain enough detail to distract the brain from layout imperfections.</p><figure><br>  <img style="display: inline-block; max-width: 50%; vertical-align: top;" src="/images/design-rules/icons-bad-1.png"><img style="display: inline-block; max-width: 50%; vertical-align: top;" src="/images/design-rules/icons-good-1.png"><br>  <div style="color: #555; text-align: center;">No icons — looks like a poor man’s try. Add icons, and you’re good to go.</div><br></figure><p>I hear you objecting that it takes a designer to draw icons. Fear not, creative commons got you covered. I’m sure you already know font awesome and its friend, glyphicons. If you want to go above that, there’s a couple fo websites with CC icons: <a href="https://thenounproject.com/" target="_blank" rel="noopener">The Noun Project</a> and <a href="https://icons8.com/" target="_blank" rel="noopener">Icons8</a>. If you need something really special, don’t be afraid to draw your own in Inkscape — you can handle circle + line (that’s search), a couple of lines (close, menu) or even a triangle (arrows, or, if you add a line, pencil for edit). Don’t be shy, unleash your creativity.</p><p>One thing to be aware of here is the stylistic integrity of your icon set. This means, mostly: choose filled or outlined icons, sharp or round corners, detail / stroke width, and stick with it. One of the more overlooked consequences here is that you can’t just randomly scale icons — the widths would look off. Take care.</p><h2 id="Bonus-point-mind-the-context"><a href="#Bonus-point-mind-the-context" class="headerlink" title="Bonus point: mind the context"></a>Bonus point: mind the context</h2><p>Good design is always contextual. The principles I described here have their roots in western modernism, that happens to be appealing to educated western people, and, coincidentally, is a safe default for an average webapp / website. They are also pretty generic and neutral. Don’t blindly slap these rules everywhere and claim that you’ve just made it better:</p><ul><li>A website for Chinese audience — from my point of view, you should stuff as much as you can there, and make some of it golden, but there might be some more sophisticated design language underlying these beauties.</li><li>A children’s book. Don’t assume that children are stupid adults with a knack for bright colors, either.</li><li>The promotional website of a pop star tour — you have to do better than neutral to make people drop their monthly salary on a fiesta,</li></ul><hr><p>You haven’t just magically become a designer by knowing these principles. Go and apply them to every single thing you make, year after year. You’ll find that everything makes more sense now, but you’re still not a designer. There’s much more to learn. Also: yes, you can find these rules broken right here on this page. Go on and tell me — that counts as practice!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For some reason, many developers disdain design. We are programmers, we are smart and rational, and we think technically. Designers are w
      
    
    </summary>
    
    
      <category term="programming" scheme="https://thoughtspile.github.io/tags/programming/"/>
    
      <category term="frontend" scheme="https://thoughtspile.github.io/tags/frontend/"/>
    
      <category term="design" scheme="https://thoughtspile.github.io/tags/design/"/>
    
  </entry>
  
  <entry>
    <title>Keep a React component mounted</title>
    <link href="https://thoughtspile.github.io/2018/12/02/react-keep-mounted/"/>
    <id>https://thoughtspile.github.io/2018/12/02/react-keep-mounted/</id>
    <published>2018-12-02T14:04:51.000Z</published>
    <updated>2018-12-02T14:26:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>The second most important React optimization technique after <code>shouldComponentUpdate</code> and friends is remount management. Some portions of the UI can be hidden or shown — sidebars, drop-down menus, modals and draggable widgets are all prominent examples. The basic React pattern for conditional rendering is boolean short-circuiting:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;condition &amp;&amp; &lt;Component data=&#123;data&#125; /&gt;&#125;</span><br></pre></td></tr></table></figure><p>However, if you go this way, you create DOM elements every time the component is displayed. As the component grows in size, the lag between the interaction and mounting can become noticeable. You can combat this (Vue and Angular even have this functionality built-in) by keeping the component rendered unconditionally and hiding it with CSS:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123; <span class="attr">display</span>: condition ? <span class="literal">null</span> : <span class="string">'none'</span> &#125;&#125;&gt;</span><br><span class="line">  &lt;Component data=&#123;data&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>You also get to preserve <code>Component</code>‘s state for free along with the DOM state (scroll, focus, and input position). However, this solution has drawbacks, too:</p><ol><li>You mount the component on startup, even if the user never accesses it. Mounting multiple components at the same time can accumulate to very sluggish start-up performance.</li><li>You update the component even when it’s invisible, which may or may not be what you want.</li></ol><p>I’m about to propose a solution that walks the middle ground between the two: you mount the component when the user first sees it, subsequent toggles use CSS. You can also control whether you want the hidden component to update with an option — I’ll provide an extended study of the use cases below.  This is more of a straw-man proposal than something I’m ready to wrap into a library, so any discussion is welcome. Play with the code (I’ve opted for preact to show how this method applies to any JSX-based solution) at <a href="https://codesandbox.io/s/82jo98o708" target="_blank" rel="noopener">codesandbox</a>.</p><h2 id="The-solution"><a href="#The-solution" class="headerlink" title="The solution"></a>The solution</h2><p>Let’s start by wrapping the CSS solution into a component with a render prop:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeepMounted</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; isMounted, render &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; <span class="attr">display</span>: isMounted ? <span class="literal">null</span> : <span class="string">'none'</span> &#125;&#125;&gt;</span><br><span class="line">        &#123; render() &#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ use as</span></span><br><span class="line"><span class="regexp">&lt;KeepMounted</span></span><br><span class="line"><span class="regexp">  isMounted=&#123;condition&#125;</span></span><br><span class="line"><span class="regexp">  render=&#123;() =&gt; &lt;Component data=&#123;data&#125; /</span>&gt;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>Now we make one minor adjustment: only call <code>render</code> once <code>isMounted</code> has been set to <code>true</code> once. I do it this way:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeepMounted</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  hasBeenMounted = <span class="literal">false</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; isMounted, render &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">this</span>.hasBeenMounted = <span class="keyword">this</span>.hasBeenMounted || isMounted;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; <span class="attr">display</span>: isMounted ? <span class="literal">null</span> : <span class="string">'none'</span> &#125;&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.hasBeenMounted ? render() : <span class="literal">null</span>&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>You might argue that <code>hasBeenMounted</code> belongs in <code>state</code>, but in this case it works better this way. <code>KeepMounted</code> never triggers visibility change by itself, and synchronizing store and prop updates either limits compatibility with older versions of <code>React</code> given the <code>componentWillUpdate</code> havoc, or forces double rendering if using <code>componentDid*</code>. But what was that thing about bypassing updates that I wanted?</p><h3 id="Preventing-updates"><a href="#Preventing-updates" class="headerlink" title="Preventing updates"></a>Preventing updates</h3><p>At a first glance, there’s no reason to re-render the component when it’s hidden. But the component can produce very different DOM depending on the state: say, it’s a list that grows from 1 to 1000 items while it’s hidden. In that case, updating it once it’s displayed is not much cheaper than mounting it from scratch. Adding items one at a time while it’s hidden will not be noticeable. There’s no right solution here, simply thinking about this helps a lot.</p><p>React component updates when either their parent updates (possibly inducing prop changes), or the component’s own state changes (this includes connecting to a state manager). We can bypass the update-from-parent when the component is hidden by not calling <code>render()</code>. We need some fallback elements to use — the last <code>render</code> output will do.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeepMounted</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  children = <span class="literal">null</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// And I even have an option to choose the desired behaviour:</span></span><br><span class="line">    <span class="keyword">const</span> &#123; isMounted, updateUnmounted, render &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">this</span>.children = (isMounted || updateUnmounted) ? render() : <span class="keyword">this</span>.children;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; <span class="attr">display</span>: isMounted ? <span class="literal">null</span> : <span class="string">'none'</span> &#125;&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.children&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>You also need the wrapped component (the one we return in <code>render()</code>) to be pure — some edge case, but its render method is called on every <code>KeepMounted</code> update if you don’t do that.</p><p>Unless you’re too tricky, hidden components don’t call <code>setState</code> — the user has no way to interact with them. This leaves us with preventing the updates from the state manager. Careful there, if we stop listening to store updates altogether, we might render stale UI once we show it again. I haven’t gone too deep, but injecting <code>isMounted</code> through the context and using it right below the connector HOC should do the trick (for HOC-based connectors).</p><h2 id="Alternative-designs"><a href="#Alternative-designs" class="headerlink" title="Alternative designs"></a>Alternative designs</h2><p>I’ve also evaluated two alternative designs: using a HOC and <code>children</code>. I find the render-prop-based solution the cleanest and most convenient, but here they are for completeness.</p><h3 id="Higher-order-component"><a href="#Higher-order-component" class="headerlink" title="Higher-order component"></a>Higher-order component</h3><p>You can obviously do that. However, render prop allows you to hide an arbitrary segment of layout instead of one single component, and you also have prop name collisions to handle (granted, <code>isMounted</code> is probably not the most popular prop name). You’ll use it like:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LazyComponent = keepMounted(&#123; <span class="attr">updateMounted</span>: <span class="literal">true</span> &#125;)(Component);</span><br><span class="line">&lt;LazyComponent isMounted=&#123;cond&#125; data=&#123;data&#125; /&gt;</span><br></pre></td></tr></table></figure><h3 id="children-trick"><a href="#children-trick" class="headerlink" title="children trick"></a><code>children</code> trick</h3><p>An interesting option since it leaves the <code>&amp;&amp;</code> conditional rendering pattern intact:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// usage</span></span><br><span class="line">&lt;KeepChildrenMounted&gt;</span><br><span class="line">  &#123; condition &amp;&amp; &lt;Component /&gt; &#125;</span><br><span class="line">&lt;/KeepChildrenMounted&gt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeepChildrenMounted</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  children = <span class="literal">null</span>;</span><br><span class="line">  render(&#123; children &#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> emptyChildren = isEmptyChildren(children);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!emptyChildren) &#123;</span><br><span class="line">      <span class="keyword">this</span>.children = children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; <span class="attr">display</span>: emptyChildren ? <span class="string">"none"</span> : <span class="literal">null</span> &#125;&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.children&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>However, it requires children introspection (conveniently hidden inside <code>isEmptyChildren</code>). This is not that hard, but always feels hacky. The major problem is that it gives you an impression that you can write:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;KeepChildrenMounted&gt;</span><br><span class="line">  &#123;cond1 &amp;&amp; &lt;Component1 /&gt;&#125;</span><br><span class="line">  &#123;cond2 &amp;&amp; &lt;Component2 /&gt;&#125;</span><br><span class="line">&lt;/KeepChildrenMounted&gt;</span><br></pre></td></tr></table></figure><p>And expect it to keep everything mounted. It is doable, but children need a <code>key</code>, you have to introspect them even more, and track it manually. Very hacky. You could also check the child count and give a warning, but you won’t always hit that condition when testing.</p><h2 id="Lazy-loading-and-code-splitting"><a href="#Lazy-loading-and-code-splitting" class="headerlink" title="Lazy loading and code splitting"></a>Lazy loading and code splitting</h2><p>This pattern also enables two more interesting use cases. Since the component does not mount immediately, you can delay fetching the data needed to render it until the user sees it. Also, if the child component is heavy, you can slap a code-split boundary on it and only load the actual code when it’s necessary. This way, the users who never see the component will not have to pay for using it. Very exciting.</p><hr><p>The idea appears so cool and useful I’m surprised there isn’t an npm module for it yet (have I looked in the wrong place?). <a href="https://codesandbox.io/s/82jo98o708" target="_blank" rel="noopener">Play with the code</a>, choose your preferred API option, point out what gotchas I haven’t thought of. Feel free to wrap it into a library yourself if you’re brave enough. Above all, have a nice weekend.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The second most important React optimization technique after &lt;code&gt;shouldComponentUpdate&lt;/code&gt; and friends is remount management. Some p
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://thoughtspile.github.io/tags/javascript/"/>
    
      <category term="programming" scheme="https://thoughtspile.github.io/tags/programming/"/>
    
      <category term="frontend" scheme="https://thoughtspile.github.io/tags/frontend/"/>
    
      <category term="react" scheme="https://thoughtspile.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Major Garbage Producers in JS</title>
    <link href="https://thoughtspile.github.io/2018/11/24/garbage-producing-js/"/>
    <id>https://thoughtspile.github.io/2018/11/24/garbage-producing-js/</id>
    <published>2018-11-24T15:25:43.000Z</published>
    <updated>2018-11-24T15:34:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>The reckless coding culture of JS favors producing garbage. In real life, if you’re environmentally conscious (hey there, my European readers), you probably do all sorts of crazy thinks to cut down on garbage — reject plastic bags in a supermarket, recycle bottles, keep the paper garbage in a closet until the special paper-garbage truck comes on Thursday. But when it comes to JS, the general sentiment magically becomes “let’s litter like crazy, then let the engine designers do their thing and come up with something to make that work at the speed of C”. Apparently, there’s only that much the poor guys can do.</p><p>Even if you do a quick complexity analysis here and there, and know your way around a profiler, hot garbage is going to bite you. It won’t be a literal memory leak — occasionally garbage collector would come and clean up your mess — but it places strain on the user’s PC resources, and in the worst case you might end up with a 10+ seconds GC pause.</p><p>It’s time that we learn to stand up for ourselves. We should at least identify eco-unfriendly JS patterns, so that we know whom to blame. In this post, I describe three patterns that lead to excess garbage production, and give you an insight into static-memory JS programming — the kind you want to use in low-level hot code.</p><h2 id="Array-method-chains"><a href="#Array-method-chains" class="headerlink" title="Array method chains"></a>Array method chains</h2><p>Chaining array methods might be concise and functional, but it’s a terrible memory buster. Count with me:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = arr <span class="comment">// Say we have   110 elements here</span></span><br><span class="line">  .filter(<span class="function"><span class="params">e</span> =&gt;</span> e.user) <span class="comment">// say, + 100 elements</span></span><br><span class="line">  .map(<span class="function"><span class="params">e</span> =&gt;</span> e.user) <span class="comment">//         + 100 elements</span></span><br><span class="line">  .map(<span class="function"><span class="params">u</span> =&gt;</span> u.wealth || <span class="number">0</span>) <span class="comment">//  + 100 elements</span></span><br><span class="line">  .reduce(<span class="function">(<span class="params">acc, wealth</span>) =&gt;</span> acc + wealth, <span class="number">0</span>); <span class="comment">// all to get a number!</span></span><br></pre></td></tr></table></figure><p>We’ve just allocated 300 elements across 3 arrays, while we only needed one numeric variable (what is it, around 8 bytes?).</p><h3 id="Less-calls-larger-functions"><a href="#Less-calls-larger-functions" class="headerlink" title="Less calls, larger functions"></a>Less calls, larger functions</h3><p>Just because you can write every operation as a one-liner arrow, does not mean you should. In the above case, we could rewrite the chain into a non-chain, removing intermediate arrays:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = arr.reduce(<span class="function">(<span class="params">acc, e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> wealth = (e &amp;&amp; e.user) ? (e.user.wealth || <span class="number">0</span>) : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> acc + wealth;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>As you can see in <a href="https://jsperf.com/array-chains" target="_blank" rel="noopener">this jsperf</a>, this solution is several times faster than the excessively chained one.</p><p>Of course, this limits the reusability of individual transforms — but, honestly, when was the last time you used non-inline function in a map (<code>.map(mapper)</code>)? Programming is a way of tradeoffs.</p><h3 id="for-loops"><a href="#for-loops" class="headerlink" title="for loops"></a><code>for</code> loops</h3><p>For especially hot functions, it makes sense to switch to good old <code>for</code> loops with index:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> e = arr[i];</span><br><span class="line">  <span class="keyword">if</span> (e &amp;&amp; e.user) &#123;</span><br><span class="line">    total += e.user.wealth || <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Iterator-based for..of loops may be the stylish and concise choice here, but, depending on your browser, they may be as fast as the indexed version, or the slowest option, or be not supported at all. When you transpile the code into ES5, for..of loops turn into plain loops and naturally run at the same speed, but you should not assume this would always be the case. Also, the spec requires iterators to produce a new object at any iteration, which complicates the GC job instead of easing it.</p><h2 id="Defensive-Cloning"><a href="#Defensive-Cloning" class="headerlink" title="Defensive Cloning"></a>Defensive Cloning</h2><p>This pattern is not as widespread in Redux community as it used to be in Flux / event bus times, but it’s a case where a single statement can stall your program. I’m talking about <code>_.cloneDeep</code> and friends.</p><p>The premise of cloning is noble: you have no idea what the consumers will do to your object, but mutating them might break the other consumers’ assumptions. <strong>example</strong> This is most prominent in middlewares and observables, because these patterns assume low coupling, and you have no idea where the object you create goes and what happens to it. If you hand each consumer a unique copy of the object, it can do no harm to others.</p><h3 id="Clone-only-what’s-necessary"><a href="#Clone-only-what’s-necessary" class="headerlink" title="Clone only what’s necessary"></a>Clone only what’s necessary</h3><p>The basic redux pattern with object spreads — using <code>{ ...state, user }</code> to overwrite a single property — is already a good enough solution. Even if you overwrite the most deeply nested property, you generally allocate only <code>O(log N)</code> new memory for an N-sized object. That is, if you have a 3-nested object with 6 properties at each level, you only create 3 new object per clone instead of 6^3 = 216. Much better!</p><h3 id="Use-Immutable-js"><a href="#Use-Immutable-js" class="headerlink" title="Use Immutable.js"></a>Use Immutable.js</h3><p>Libraries such as Immutable.js give the consumers no way to mutate the original object. They also enable you to change the object in patches, with smaller memory pressure than the naive method. The drawback is that the syntax for working with Immutable objects is more verbose, especially if you’re interfacing with plain JS objects, so this solution works best for apps developed from scratch. As an alternative, you could employ ES6 <code>Object.freeze</code>, but the browser support is not quite there yet.</p><p>Unfortunately, this option also imposes runtime performance cost for property access, which might not be the best thing to do out of pure cautiousness.</p><h3 id="Make-up-your-mind-about-mutation"><a href="#Make-up-your-mind-about-mutation" class="headerlink" title="Make up your mind about mutation"></a>Make up your mind about mutation</h3><p>My favorite option here is not technological. Impose a global rule over your codebase: <em>do not mutate the objects you did not create.</em> Beat yourself on the fingers with a ruler when you do. Enforce this in code reviews. Explain the problem you’re solving to your colleagues. If you absolutely must mutate the object, clone it as soon as you receive it. That’s 1 explicit clone per 100 calls, not the default case. Much better.</p><h2 id="Object-arguments"><a href="#Object-arguments" class="headerlink" title="Object arguments"></a>Object arguments</h2><p>This one is primarily for designing hot-utility libraries. The guys often opt for ease of use and design APIs with <code>options</code> argument that accepts an object:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ugly and inflexible (or is it?)</span></span><br><span class="line">formatGreeting(<span class="string">'Waldemar'</span>) <span class="comment">// hello, Waldemar!</span></span><br><span class="line"><span class="comment">// You don't have to remember arg position! And we can add more options later.</span></span><br><span class="line">formatGreeting(&#123; <span class="attr">name</span>: <span class="string">'Waldemar'</span> &#125;) <span class="comment">// hello, Waldemar!</span></span><br></pre></td></tr></table></figure><p>It’s all very nice and convenient until you realize that you have to create an object on every call, then throw it away. Here’s <a href="https://jsperf.com/object-vs-positional-args" target="_blank" rel="noopener">another jsperf</a> that shows just how big a hit this can be.</p><p>Make a rule of accepting required arguments positionally in hot utility functions. You can always reserve the last position for an optional argument object a-la python to allow your users to opt-in to extended functionality:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formatGreeting(<span class="string">'Waldemar'</span>, &#123; <span class="attr">lang</span>: <span class="string">'fr'</span> &#125;) <span class="comment">// Bonjour, Waldemar!</span></span><br></pre></td></tr></table></figure><hr><p>I know, I know, your favourite quote starts with “premature optimization” and ends with “evil”. However, if you don’t take these things into consideration when writing low-level code, you’ll soon find your validations take 400ms per keyword stroke, your visualizations hang the browser, and your node server do GC pauses every other second. I’m not promoting the use of these techniques in all your code, but as soon as you recognize a code path is hot — go for it! At least you’ll know what to look for. Good luck!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The reckless coding culture of JS favors producing garbage. In real life, if you’re environmentally conscious (hey there, my European rea
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://thoughtspile.github.io/tags/javascript/"/>
    
      <category term="programming" scheme="https://thoughtspile.github.io/tags/programming/"/>
    
      <category term="performance" scheme="https://thoughtspile.github.io/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>Why you Might Want to Extend React Components</title>
    <link href="https://thoughtspile.github.io/2018/11/05/react-extend-justified/"/>
    <id>https://thoughtspile.github.io/2018/11/05/react-extend-justified/</id>
    <published>2018-11-05T11:38:29.000Z</published>
    <updated>2018-11-05T21:04:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Do not <code>extend</code> components. If there is anything React community agrees upon, this is it. <a href="https://reactjs.org/docs/composition-vs-inheritance.html" target="_blank" rel="noopener">Use HOCs</a>. Use state managers (and their connector HOCs). Use render props. <a href="https://stackoverflow.com/a/47032288/2699012" target="_blank" rel="noopener">Do not inherit</a>. Remember, <a href="https://en.wikipedia.org/wiki/Composition_over_inheritance" target="_blank" rel="noopener">composition over inheritance</a>! Obey your guru. Once upon a time, a developer extended his component, and a lightning stroke him.</p><p>This is a mantra. I like mantras just as much as <a href="https://www.thoughtworks.com/insights/blog/composition-vs-inheritance-how-choose" target="_blank" rel="noopener">Steven here</a> (I don’t). Things other people say should not discourage you from thinking for yourself, doing your research and analyzing design choices pragmatically, not superstitiously.</p><p>For a motivational example: when the docs say <code>At Facebook, we use React in thousands of components, and we haven&#39;t found any use cases where we would recommend creating component inheritance hierarchies</code>, that’s a bit tongue-in-cheek. They have indeed found at least one such case — sitting right in React core, there is <code>PureComponent</code>. With this in mind, let us embark on journey to stop being afraid and extend our components joyfully.</p><h2 id="Introducing-Component-Inheritance"><a href="#Introducing-Component-Inheritance" class="headerlink" title="Introducing Component Inheritance"></a>Introducing Component Inheritance</h2><p>A bit of history for those who haven’t been around in the wild days of React (circa 2014). We had no redux, no HOCs, and no idea how to write React apps that do not fall apart. We came up with all sorts of wild patterns. Coding was adventurous and imaginative, just probably not in a good way.</p><p>Our working example starts with an idea of making a reusable piece of logic that would give our components <code>toggle</code> functionality — provide a boolean state flag and a way to switch it. The guys with OOP background see an immediately apparent way to do it. We make a semi-component:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Togglable</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Basic React state stuff</span></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">open</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.toggle = <span class="keyword">this</span>.toggle.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  toggle() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">open</span>: !<span class="keyword">this</span>.state.open &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Why semi-? No render, won't work by itself.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And now we extend it with <code>render</code> definition of our choice:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TogglerExt</span> <span class="keyword">extends</span> <span class="title">Togglable</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (&lt;div onClick=&#123;this.toggle&#125;&gt;</span><br><span class="line">      &#123;this.state.open ? 'open' : 'closed'&#125;</span><br><span class="line">    &lt;/div&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For completeness, here’s a canonical way to do this in 2018 using a HOC:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withToggle = <span class="function"><span class="params">Cmp</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">WithToggle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">      <span class="keyword">super</span>();</span><br><span class="line">      <span class="keyword">this</span>.state = &#123; <span class="attr">open</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">      <span class="keyword">this</span>.toggle = <span class="keyword">this</span>.toggle.bind(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    toggle() &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">open</span>: !<span class="keyword">this</span>.state.open &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> &lt;Cmp open=&#123;this.state.open&#125; toggle=&#123;this.toggle&#125; /&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const TogglerHoc = withToggle(p =&gt; (</span><br><span class="line">  &lt;div onClick=&#123; p.toggle &#125;&gt;</span><br><span class="line">    &#123;this.state.open ? 'open' : 'closed'&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>We could also write this in three lines of <a href="https://github.com/acdlite/recompose" target="_blank" rel="noopener">recompose</a> (<code>withState</code> + <code>withHandlers</code>), but that’s beside the point. Also note how the code for both options is almost identical — we’ll use this later to do something cool.</p><h2 id="The-Business-Reuse-Legacy-Components"><a href="#The-Business-Reuse-Legacy-Components" class="headerlink" title="The Business: Reuse Legacy Components"></a>The Business: Reuse Legacy Components</h2><p>You know these — components that are 300+ lines long and have a fair share of business  logic in them. For some reason, they usually have JSX-returning methods, something like <code>renderAvatar</code>. The most infuriating thing about these? They may be old, obese and gross, but they’ve been around this project longer than you have, and are mostly working the way they’re supposed to. Something like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCard</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  renderMenu() &#123;</span><br><span class="line">    <span class="comment">// some JSX here</span></span><br><span class="line">  &#125;</span><br><span class="line">  isOnline() &#123;</span><br><span class="line">    <span class="comment">// and a lot of logic there</span></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (&lt;Card&gt;</span><br><span class="line">      &lt;Avatar url=&#123;this.props.avatar&#125; isOnline=&#123;this.isOnline()&#125; /&gt;</span><br><span class="line">      &#123; this.renderMenu() &#125;</span><br><span class="line">    &lt;/Card&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So, how would you approach making a similar component with the same business logic and similar layout parts? To be concrete, let’s say we want to put our users into a table instead of a card list. Would you run and start decomposing, making <code>render*</code> methods proper components, extracting the business logic into a state manager? Do you have all the time in the world to do this task? Let’s hack around and do some real work.</p><p><code>extend</code> to the rescue!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRow</span> <span class="keyword">extends</span> <span class="title">UserCard</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (&lt;tr&gt;</span><br><span class="line">      &lt;td&gt;</span><br><span class="line">        &lt;Avatar url=&#123;this.props.avatar&#125; isOnline=&#123;this.isOnline()&#125; /&gt;</span><br><span class="line">      &lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&#123; this.renderMenu() &#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Do not judge me! We’ve reused the old component without disrupting its function and with little to no duplication (just some in the <code>render</code> method). Let’s try once again, with method overrides and super calls:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellerCard</span> <span class="keyword">extends</span> <span class="title">UserCard</span> </span>&#123;</span><br><span class="line">  renderMenu() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.isBlocked</span><br><span class="line">      ? &lt;Menu warn="Blocked seller" /&gt;</span><br><span class="line">      : super.renderMenu();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There’s a hundred reasons not to write components like this, and I wouldn’t call it a clean solution I am proud of, but this is very effective in getting out of the <em>so worried about the state of your codebase you can’t eat</em> block.</p><h2 id="The-Technical-Performance-Considerations"><a href="#The-Technical-Performance-Considerations" class="headerlink" title="The Technical: Performance Considerations"></a>The Technical: Performance Considerations</h2><p>Never mind the design, let’s move into the land of extreme performance hacks. Common sense tells that with HOCs React has twice as much bookkeeping to do: set up both the parent and the child components, call their lifecycle hooks in the proper order, and so on. So, subclass components should be faster than HOCs.</p><p>Since common sense is not worth much when it comes to performance testing, I made an actual benchmark using the toggler example introduced earlier. It is a realistic use case, not some synthetic benchmark. Still, it shows updating the HOC to be slightly (3–10%) slower in webkits (Chrome and Safari), and 50% slower in Firefox. If you don’t trust me, head over to a <a href="https://github.com/thoughtspile/hoc-vs-extend" target="_blank" rel="noopener">special repo</a> and see for yourself.</p><p>This is probably not a deal-breaker for most real apps, but, again, something to keep in mind — layering HOCs has a real performance cost. This is also the reason why <code>PureComponent</code> works best as-is — having performance helpers be performant makes sense.</p><h2 id="Best-of-Both-Worlds-and-Generality"><a href="#Best-of-Both-Worlds-and-Generality" class="headerlink" title="Best of Both Worlds (and Generality)"></a>Best of Both Worlds (and Generality)</h2><p>An especially powerful thing about the extend pattern is its generality. The parent component exposes all its methods and internal state for you to play with, so you can do whatever you please, even make a HOC out of it! This openness is not always good — with great power comes great responsibility, <em>etcetera, etcetera.</em> For what it’s worth, here is the extend-toggler, wrapped in a HOC:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withToggleExt = <span class="function"><span class="params">Cmp</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">WithToggle</span> <span class="keyword">extends</span> <span class="title">Togglable</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> &lt;Cmp open=&#123;this.state.open&#125; toggle=&#123;this.toggle&#125; /&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>With a bit of trickery you could even make a generic <em>hocifier</em> that takes two components and plugs one into the other’s render method.</p><h2 id="The-Downsides"><a href="#The-Downsides" class="headerlink" title="The Downsides"></a>The Downsides</h2><p>Frankly, I do not extend components all the time either, and here is why:</p><ul><li>No clear-cut interface boundary. Well-written HOCs have decorator options and the props they inject into the decorated component. With extend, all the component code is the public interface. You can somewhat cover it with TypeScript, but it’s duct tape over duct tape.</li><li>There is no way to inherit from several components. Using extend, you can’t make your component both Pure and Togglable. HOCs, on the other hand, are easily composable, albeit with a runtime performance cost. Granted, JS is so dynamic you could write your own multiple inheritance / mixin engine, but this is also beyond the scope of this article.</li><li>You can’t use functional components any more. Not for the base components, not for the derived ones. It’s a pity, I love the brevity and ease of creation.</li><li>Lifecycle hooks in child components are verbose. If you define <code>componentDidMount</code> in the child component, it’s now your responsibility to call the parent hook. Even worse, the parent hook may or may not exist, so you have to check before you call.</li></ul><p>Dual extend / HOC pattern works around these issues nicely, but nullifies the performance benefits.</p><hr><p>So, should switch to extending your components exclusively? As you might have guessed by the downside list, absolutely not! Just do not rule out this option, especially if you’re developing a library. Since you can expose both options to the library users, there’s no reason to reject. To repeat, the two cases where I find <code>extend</code> viable are:</p><ul><li>Making a slightly changed version of a legacy component without rewriting it completely.</li><li>Squeezing the last bit of performance out of your helper components, at the expense of convenience.</li></ul><p>If you like what you just read, encourage me in the comments and subscribe to my blog — I have a more exhaustive overview of React composition patterns in writing, with HOCs, render props, and maybe even <code>useState</code>. If you hate what you just read (interesting! why are you still reading it then?) — discourage me in the comments or write an angry email. Anyways, you’re a bit smarter now. Have a nice week and enjoy yourself.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Do not &lt;code&gt;extend&lt;/code&gt; components. If there is anything React community agrees upon, this is it. &lt;a href=&quot;https://reactjs.org/docs/co
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://thoughtspile.github.io/tags/javascript/"/>
    
      <category term="programming" scheme="https://thoughtspile.github.io/tags/programming/"/>
    
      <category term="frontend" scheme="https://thoughtspile.github.io/tags/frontend/"/>
    
      <category term="react" scheme="https://thoughtspile.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>OOP for FP lovers: Simplistic Dependency Injection</title>
    <link href="https://thoughtspile.github.io/2018/10/28/simplistic-di/"/>
    <id>https://thoughtspile.github.io/2018/10/28/simplistic-di/</id>
    <published>2018-10-28T11:28:01.000Z</published>
    <updated>2018-10-28T11:42:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>With all the enthusiasm around functional design in javascript community, we’ve come to reject the concepts whose names remind us of object-orientation. We throw constructors, methods and classes out of the window because they seem to smell of bank cubicles, water coolers and ERP. I’ve been on that train, but now I’m free from the prejudice. Great, useful ideas are hidden inside the fancy OOP terming, and I’m here to expose their niceness. We shall begin with Dependency Injection.</p><h2 id="We-Have-a-Problem"><a href="#We-Have-a-Problem" class="headerlink" title="We Have a Problem"></a>We Have a Problem</h2><p>I hear your teeth cringe as dusty IoC containers and AngularJS fly around your head. Take a deep breath and bear with me. Let’s write a module, say, a User service, that <em>depends</em> on other modules — a requester and the config. Normally, we code it along the lines of (for some imaginary redux-like state manager):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getUserList &#125; <span class="keyword">from</span> <span class="string">'./getUserList'</span>;</span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  pageSize: <span class="number">10</span>,</span><br><span class="line">  host: <span class="string">'192.168.0.0'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initState = <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">users</span>: [] &#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">loadNextUsers</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getUserList(&#123;</span><br><span class="line">    limit: config.pageSize,</span><br><span class="line">    offset: state.users.length,</span><br><span class="line">    host: config.host,</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">nextUsers</span> =&gt;</span> &#123;</span><br><span class="line">    state.users.push(...nextUsers);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The dependency structure of this app is set in stone, allowing no fiddling. It causes two classic problems. The module is not too reusable: we can’t customize the page size or host when loading the users. Testablity could be better, too: while we could have a <code>getUserList.mock.js</code> lying around for testing, replacing <code>config</code> in module’s internal scope is probably excessively tricky, even if possible.</p><h2 id="STEP-Enter-DI"><a href="#STEP-Enter-DI" class="headerlink" title="STEP! Enter DI."></a>STEP! Enter DI.</h2><p>If we have <em>dependencies</em>, we can <em>inject</em> them! All it takes in our functional example is passing them to <code>loadNextUsers</code> as a parameter:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initState = <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">users</span>: [] &#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">loadNextUsers</span>(<span class="params">state, getUserList, config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getUserList(&#123;</span><br><span class="line">    limit: config.pageSize,</span><br><span class="line">    offset: state.users.length,</span><br><span class="line">    host: config.host,</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">nextUsers</span> =&gt;</span> &#123;</span><br><span class="line">    state.users.push(...nextUsers);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>That’s not a huge change: instead of explicitly specifying and importing the dependencies inside a module, we do it one level above. By the way, <code>state</code> was injectable from the beginnning, allowing us to play with it or create multiple instances.</p><p>At first, it might seem like added verbosity and bookkeeping. But hey, look at the upsides! Now we can override the config as much as we like when loading the users: vary page size and the host (frankly, the host setting is a bit silly, but I couldn’t think of anything better — just pretend it’s super useful).</p><p>Testing becomes a joy. Instead of using a magic loader that takes not-the-module-we-specify-but-the-one-with-<code>.mock</code>-added-if-there-is-one, we can just call our function directly with a mocked dependency, using <a href="https://www.node-tap.org/" target="_blank" rel="noopener">node-tap</a> or even a bunch of <code>assert</code>s.</p><p>And the best thing is — we can use the explicit dependencies from the first example as default parameters, combining the best of both approaches.</p><p>This spirit of DI is what separates</p><ul><li><code>sum([1,2,3,4])</code> from <code>reduce([1,2,3,4], (x, y) =&gt; x + y, 0)</code> — we <em>inject</em> the reducer and the initial value.</li><li><code>mongoose</code> from <code>new Mongoose()</code> — this is brilliant API design, giving you ease of use for the 90% use case while providing an escape hatch to <em>inject</em> <a href="https://stackoverflow.com/questions/19474712/mongoose-and-multiple-database-in-single-node-js-project#19475270" target="_blank" rel="noopener">multiple databases</a> if you need to.</li><li><code>alias: { &#39;react&#39;: &#39;preact-compat&#39; }</code> in webpack from <code>@tappable({ h })</code> — yes, JSX-based helper libraries would have made us a favor by allowing to <em>inject</em> the JSX provider instead of relying on bundler trickery.</li></ul><h2 id="Are-We-Done-Yet"><a href="#Are-We-Done-Yet" class="headerlink" title="Are We Done Yet?"></a>Are We Done Yet?</h2><p>Our homegrown DI is not perfect — it has problems of its own compared to real IoC containers, such as <a href="http://inversify.io/" target="_blank" rel="noopener">InversifyJS</a>. The more stuff we inject, the more positional arguments we have to pass around, which becomes painful. Moreover, somewhere in our code we are still bound to the physical location of source modules, importing and repeating ourselver over and over. So yes, real, unhip, enterprise flavor of DI solves real problems.</p><hr><p>Please take some time to think it all over. DI is good. OOP is even better. They have non-hacky solutions to real challenges. Had it for over 20 years now, just sitting around. FP is good, too, for the same reason — not because of <em>elegance</em>, whatever that means. Meanwhile, I’ll try to write more on the merits of loosely-understood OOP, so make sure to come back!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;With all the enthusiasm around functional design in javascript community, we’ve come to reject the concepts whose names remind us of obje
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://thoughtspile.github.io/tags/javascript/"/>
    
      <category term="programming" scheme="https://thoughtspile.github.io/tags/programming/"/>
    
      <category term="OOP" scheme="https://thoughtspile.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Angular Tip: Derived Interfaces in TypeScript</title>
    <link href="https://thoughtspile.github.io/2018/10/22/typescript-derived-interface/"/>
    <id>https://thoughtspile.github.io/2018/10/22/typescript-derived-interface/</id>
    <published>2018-10-22T08:21:34.000Z</published>
    <updated>2018-10-22T13:09:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you use Angular DI, you probably declare your service classes twice, like this:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IUserService &#123;</span><br><span class="line">  getUsers(): IUser[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserService <span class="keyword">implements</span> IUserService &#123;</span><br><span class="line">  getUsers() &#123;</span><br><span class="line">    <span class="keyword">return</span> fetch&lt;IUser[]&gt;(<span class="string">'/users'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Declaring classes like this is horrible. You describe your logic twice for no good reason. You get no extra error protection, no better code completion, no benefits whatsoever. You just edit twice on every change.</p><p>You don’t normally share an interface between classes. The language, unlike C++, does not require you to declare the signature before the implementation for technical reasons. You write twice as much code because the framework wants you to. Why chose to live like that?</p><p>Luckily, in TS you can just write:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserService &#123;</span><br><span class="line">  getUsers() &#123;</span><br><span class="line">    <span class="keyword">return</span> fetch&lt;IUser[]&gt;(<span class="string">'/users'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> IUserService = UserService;</span><br></pre></td></tr></table></figure><p>You get proper type inference in methods, and the interface is then itself inferred from the implementation. You’re welcome!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you use Angular DI, you probably declare your service classes twice, like this:&lt;/p&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://thoughtspile.github.io/tags/javascript/"/>
    
      <category term="programming" scheme="https://thoughtspile.github.io/tags/programming/"/>
    
      <category term="frontend" scheme="https://thoughtspile.github.io/tags/frontend/"/>
    
      <category term="tips" scheme="https://thoughtspile.github.io/tags/tips/"/>
    
      <category term="typescript" scheme="https://thoughtspile.github.io/tags/typescript/"/>
    
      <category term="angular" scheme="https://thoughtspile.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Five Tricks for Debug-Logging in JavaScript</title>
    <link href="https://thoughtspile.github.io/2018/10/05/js-debug-logging/"/>
    <id>https://thoughtspile.github.io/2018/10/05/js-debug-logging/</id>
    <published>2018-10-05T10:33:42.000Z</published>
    <updated>2018-10-05T10:48:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Cheer up, today is a quick tip day. No <a href="/2018/09/23/bad-software-week/">rants</a>, no <a href="/2018/09/23/bad-software-week/">motivation</a>, no existentialism — just a few simple tricks you can use right now.</p><p>We’ll be talking about <code>console.log</code> and friends for debugging javascript, mostly in the browser. If you don’t use devtools debugger — try it, but I’m not here to judge you (unless you use <code>alert</code>). There is at least one case where <code>console</code> is better: you have a method that gets called frequently, and want to inspect the internal state over multiple runs, then drill down on the interesting ones. Pausing on every hit would be extremely tedious.</p><h2 id="Logging-in-concise-arrows"><a href="#Logging-in-concise-arrows" class="headerlink" title="Logging in concise arrows"></a>Logging in concise arrows</h2><p>If we want to log something inside a function written in concise arrow syntax (the one without curly braces), you might find yourself adding and removing the body and changing formatting — very boring and error-prone:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="params">res</span> =&gt;</span> res.data.age);</span><br><span class="line"><span class="comment">// what else was there in res?</span></span><br><span class="line">promise.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="comment">// meh the braces... enter...</span></span><br><span class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// this is the thing... enter...</span></span><br><span class="line">  <span class="keyword">return</span> res; <span class="comment">// oh and the "return"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>No need to suffer! Since <code>console.log</code> returns <code>undefined</code>, which is falsey, we can just write:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res) || res.data.age);</span><br></pre></td></tr></table></figure><h2 id="Beware-of-post-log-object-mutation"><a href="#Beware-of-post-log-object-mutation" class="headerlink" title="Beware of post-log object mutation"></a>Beware of post-log object mutation</h2><p>My most painful session of console-debugging was related to this one. Oh, times. I must admit, this problem does not exist for debugger pauses. Yet, for what it’s worth, let’s say we have a <code>city</code> object, and something’s wrong. Let’s log it:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> city = &#123; <span class="attr">name</span>: <span class="string">'Vladivostok'</span>, <span class="attr">poulation</span>: <span class="number">606589</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(city); <span class="comment">// &#123; name: null, population: 606589 &#125;</span></span><br></pre></td></tr></table></figure><p>What the hell? Where is the name? You try. You try again. You start suspecting V8 just shipped with multi-threading. You try again. Guess what? In a far away area of your code there’s a</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">city.name = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>The solution is simple: if you see the data look weird (or just want to double-check), dump a clone / cloneDeep (to triple-check) / stringify:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> city = &#123; <span class="attr">name</span>: <span class="string">'Vladivostok'</span>, <span class="attr">poulation</span>: <span class="number">606589</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(city));</span><br><span class="line"><span class="comment">// "&#123; "name": "Vladivostok, "population": 606589 &#125;"</span></span><br></pre></td></tr></table></figure><h2 id="Quickly-filter-logs-by-condition"><a href="#Quickly-filter-logs-by-condition" class="headerlink" title="Quickly filter logs by condition"></a>Quickly filter logs by condition</h2><p>Another trick with boolean short-circuiting is conditional logging. Suppose we have an array of users, and there’s a bug displaying users from Australia. But if you log all the users, there is a lot of eye-scanning to find the necessary ones. Booelan short-circuiting to the rescue again, with <code>condition &amp;&amp; console.log(data)</code></p><p><img src="/images/conditional-logging.png" alt=""></p><p>Bad code style? Sure. But you’ll remove it in a minute anyways.</p><h2 id="Make-your-logs-stand-out"><a href="#Make-your-logs-stand-out" class="headerlink" title="Make your logs stand out"></a>Make your logs stand out</h2><p>With a lot of logs running around your console, finding the ones you just added is no easy task.</p><p><img src="/images/painted-log.png" alt=""></p><p>If you use <code>console.error</code> or <code>warn</code>, your line will be brighter-colored and easier to find. At least until you write 20 <code>console.warn</code>s.</p><h2 id="Dump-stack-traces-with-console-error"><a href="#Dump-stack-traces-with-console-error" class="headerlink" title="Dump stack traces with console.error"></a>Dump stack traces with <code>console.error</code></h2><p>The final tip will help you find <em>who</em> called the function, instead of <em>how</em>. <code>console.error</code> conveniently captures the stack trace and shows it in a nice collapsible way. You can quickly look around and find all the call sites — very neat.</p><hr><p>That’s all for today! Hit the comments if you use know another neat logging trick, or want to blame everyone for not using real loggers, or for not using the debugger. Would love to make a teaser for the next post, but have not chosen yet. <em>Hasta la vista!</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cheer up, today is a quick tip day. No &lt;a href=&quot;/2018/09/23/bad-software-week/&quot;&gt;rants&lt;/a&gt;, no &lt;a href=&quot;/2018/09/23/bad-software-week/&quot;&gt;mo
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://thoughtspile.github.io/tags/javascript/"/>
    
      <category term="programming" scheme="https://thoughtspile.github.io/tags/programming/"/>
    
      <category term="frontend" scheme="https://thoughtspile.github.io/tags/frontend/"/>
    
      <category term="tips" scheme="https://thoughtspile.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s Make Software Better</title>
    <link href="https://thoughtspile.github.io/2018/09/29/lets-make-software-better/"/>
    <id>https://thoughtspile.github.io/2018/09/29/lets-make-software-better/</id>
    <published>2018-09-29T14:10:00.000Z</published>
    <updated>2018-09-29T14:37:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>My <a href="/2018/09/23/bad-software-week/">previous post</a>, a classic rant, how-bad-software-is-these-days kind, attracted unexpected and probably even unreasonable attention. This time I’m in for something different — I’m going to preach. Behold, and open your eyes, and open your hearts, and open your minds, as I am about to tell how we should live our lives to bring about a lifetime of good software. This is an uphill battle, people will not come in droves to cheer you up on what a great job you did, but we must stay strong and fight. We shall begin now.</p><p><img src="/images/vienna.jpg" alt=""></p><h2 id="Work-well"><a href="#Work-well" class="headerlink" title="Work well"></a>Work well</h2><p>Whatever you do, do it well. Write code magnificently. Review relentlessly. Test tirelessly. This way is a hard way, but it is the way of the warrior.</p><p>Do not let the spaghetti of a code on your hands get into production just because you’re sick of this particular feature and want to have fun. Or maybe have fun switching from technology X to technology Y, then come back and make your regular boring code good, too.</p><p>Fix bugs. This is even less fun, but it’s your project, and it’s your responsibility to make it work. Resort to hacks if you must — a working system is worth a thousand lines of clean code. Take pride in making things that work and make people happy.</p><h2 id="Understand-the-business"><a href="#Understand-the-business" class="headerlink" title="Understand the business"></a>Understand the business</h2><p>The concept of evil businesses preventing the good-hearted developers from doing their best comes up in every argument on bad software sooner or later. They hire too few people, and the ones they hire are no good, and hired too late anyways, and the management slaps a tight deadline on top, so it’s their fault. Is it, really?</p><p>The only thing that gives meaning to your work is how you make the lives of your users easier. That is a business concept, not a development one. Your code is nothing without the business it supports, but the business is still worth something without the code. So, business &gt; software &gt; code. Accept it.</p><p>Planning around people writing code is hard as it is. Without deadlines it is plain out impossible. Negotiate and adapt. Isn’t it better to do something imperfect that already works and brings value than to spend eternity chasing the perfection?</p><p>And then there’s this thing: if your company has no product, has no business strategy, has no sales, has none of all these things you call dirty and hypocritical — it also has no money, so how are they going to pay you? I bet you prefer being paid.</p><h2 id="Promote-best-practices"><a href="#Promote-best-practices" class="headerlink" title="Promote best practices"></a>Promote best practices</h2><p>You may have heard some practices make software better: code reviews, documentation, testing and refactoring. These things work. Build them into your workflow — adding even one, even a half, will make you stronger.</p><p>If your management does not approve of you spending time on this stupid geek stuff — convince them. If they will not get convinced — do a bit guerilla-style, see what the team thinks, and if it sticks.</p><h2 id="Be-open-to-other-professions"><a href="#Be-open-to-other-professions" class="headerlink" title="Be open to other professions"></a>Be open to other professions</h2><p>The fact that you are a developer does not mean that you can, or should, solve all problems with code exclusively. Sometimes it’s better to work your way around it, even if it means no code and no fun.</p><p>Have a particularly hard problem you want to slap machine learning / AI on? Leave it for the user to do manually, or do it yourself, or hire some poor students.</p><p>Have an extremely tricky front-end logic? Talk to your designer, and you might find a way to solve the problem with no code whatsoever. You just achieved the same result with no code — wonderful!</p><p>Designers, sales and project managers are working towards the same goal as you are. And yes, your users are crucial to a useful product. There is no reason not to respect these people as less technical, or less intelligent, or less anything than you — you’re a just tool for the job, as are your colleagues. So respect each other and be open to their input informed by their experience.</p><h2 id="Be-a-part-of-open-source"><a href="#Be-a-part-of-open-source" class="headerlink" title="Be a part of open source"></a>Be a part of open source</h2><p>Your codebase certainly has something with no specific business value that you have spent some time developing. It might be a migration engine for some exotic database, , a front-end snippet or an algorithm. Talk to your boss and sse if you can publish it. Making it public does no harm (it wasn’t a secret know-how in the first place, just an implementation of something more or less trivial) and provides free marketing for your company. More globally: the more open source tools we have, the easier it is to make good software, fast.</p><p>On the other side, prefer open-source tools to the ones you wrote yourself. You won’t be the only user, so some problems that did not even appear to you are already found and solved. If the existing libraries do not satisfy you as-is, pick the closest one, adapt it to your needs, than propose a PR or publish as an extension.</p><h2 id="Give-feedback-on-software-you-use"><a href="#Give-feedback-on-software-you-use" class="headerlink" title="Give feedback on software you use"></a>Give feedback on software you use</h2><p>Sometimes you’re using a website or an application and run into a bug. Report it to the team that made it. You are a tech person, and you will find your way around it, but others might not. If it’s not a real bug, just some tricky UX workflow, let them know anyway.</p><p>Don’t blame them too hard. Remember there’s a reason you use their particular service, so they’ve already made a reasonably fine job. Small teams will appreciate your input more — they have less users, so your help is more helpful. And don’t be too disappointed if they don’t fix it right away: they have more context to set priorities than you do.</p><h2 id="Educate"><a href="#Educate" class="headerlink" title="Educate"></a>Educate</h2><p>I bet you have learnt <em>something</em> useful in your life. Know how to make good user interfaces, or how to design scalable back-end infrastructure, or how to manage software projects? Well done, congratulations! Now go out there and share this precious light of knowledge with others.</p><p>Write a blog. Answer questions on stackoverflow and quora. Talk on conferences. <em>Get into education business a little bit.</em> Check with your local schools and universities, ask them if they have an instructor position for such a professional. Check bootcamps and programming courses. These jobs might not pay as well as your normal one, but they are satisfying as hell. And they usually come part-time, so you’re likely not to harm your primary occupation.</p><hr><p>Go and use these commandments for the better of the world. We all think how wrong and unjust the world order is from time to time, and I do, too, probably even more so than anyone, but we have to cut down on this crap as there is no realistic way for us to change the way things are right away. So go, and be responsible for your actions and decisions, and, no matter what you do, think of how you can do it better. Become a brick in the beautiful world of good software; fight the fight day after day; little by little we will see the world of software change. And please, please let me know if I have encouraged you even a tiny little bit — that would make me feel so much happier.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;My &lt;a href=&quot;/2018/09/23/bad-software-week/&quot;&gt;previous post&lt;/a&gt;, a classic rant, how-bad-software-is-these-days kind, attracted unexpected 
      
    
    </summary>
    
    
      <category term="programming" scheme="https://thoughtspile.github.io/tags/programming/"/>
    
      <category term="life" scheme="https://thoughtspile.github.io/tags/life/"/>
    
      <category term="thoughtspile" scheme="https://thoughtspile.github.io/tags/thoughtspile/"/>
    
      <category term="happiness" scheme="https://thoughtspile.github.io/tags/happiness/"/>
    
  </entry>
  
  <entry>
    <title>Another Week with Bad Software</title>
    <link href="https://thoughtspile.github.io/2018/09/23/bad-software-week/"/>
    <id>https://thoughtspile.github.io/2018/09/23/bad-software-week/</id>
    <published>2018-09-23T11:35:02.000Z</published>
    <updated>2018-10-05T19:56:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>In the midst of my September job hop I headed to Kazan for the weekend. I don’t know exactly why — probably because I could. I had a hotel booked via booking.com, but once I arrived there the receptionist told me it was the first time he’s heard of my booking, and he told me that they had no more rooms, and he told me that I’d rather find another place to stay.</p><p>But why, I always see these things for what they are. Some sneaky caffeinated programmer kids at work with the booking system integrations, you should always double-check after us! After what came next, I started suspecting there’s some particularly defective developer marketing himself as a <em>“Chief Hotel Booking Management System (HBMS) Professional with 10+ years experience in the field”</em>.</p><p><img src="/images/kazan-bridge.jpg" alt=""></p><p>I booked the next hotel for the two nights, with a discount, and walked there. Guess what? The room I booked was occupied, but they had another one, but not for two night, just one. In the end it worked out all right because there was that woman using the responsive, fully interactive, enterprise-ready ERP system “sheet of paper and a pencil” that allows you to reschedule bookings at will, with no programmers involved.</p><p>The rest of my trip went well, probably because I had little interaction with software stuff. The pizza place charged me twice, because they thought the first payment didn’t pass, but they gave the money back. Human problem, wasn’t it? (Of course not completely, some usability failure out there, but let’s leave it for what it is, shall we?)</p><h2 id="The-Return"><a href="#The-Return" class="headerlink" title="The Return"></a>The Return</h2><p>I was riding the train from the airport, almost eager to get back to work writing things that mostly function. I was a bit worried they didn’t give me a call — was I supposed to just come to the office and figure out what to do next? Anyways, I made some calls and found out that the information about me starting my work got lost somewhere along the course of a month it’s been running around the infrastructure.</p><p>This got me a little worried: I haven’t spent a week in Moscow without work in over three years, and, besides, I was running low on money. I wasn’t angry with anyone in particular: who should I blame for the state of the industry? I’m just as guilty as anyone for letting it fall that low. it turned out not to be that bad after all: the weather was good, and I got a chance to walk the empty city — everyone here in Moscow is too busy working hard to be out of office in the middle of the day.</p><p>My accidental vacation started along the fanfare of Nikita Prokopov’s <a href="http://tonsky.me/blog/disenchantment/" target="_blank" rel="noopener">software disenchantment</a>. It’s depressing but, and even more depressive for being true. Let me pick a quote for you:</p><blockquote><p>We cover shit with blankets just not to deal with it.</p></blockquote><p>I’ve been subscribed to this blog for several years, and never knew the man was Russian. I should have guessed — where else can a man that depressed and dissatisfied with the state-of-the-world come from? The part that caught my attention was the Russian apps on the screenshots. From there I got onto Nikita’s <a href="https://tonsky.livejournal.com/" target="_blank" rel="noopener">russian-language blog</a>.</p><h2 id="Why-must-it-be-like-this"><a href="#Why-must-it-be-like-this" class="headerlink" title="Why must it be like this?"></a>Why must it be like this?</h2><p>It’s good the blog is in Russian — serves well to save the good people of the world from Moscow-grade sadness. Somewhere in the comments on the fourth page I found a neat explanation for why the things in software are the way they are. I can’t find the particular comment any more, but I remember the gist and even spent some time elaborating on it.</p><p>Once a problem is solved by software at a minimum viable level, you don’t need programmers (we are crazy expensive) to actually make it work. The solution gets canned and distributed in a bundle that usually works, as long as you’re not getting too tricky:</p><ul><li>Edit a table of numbers? Excel!</li><li>Write a text? Word!</li><li>Send some data to another person? E-mail!</li><li>Make a website? Wordpress!</li><li>Edit an image? Photoshop!</li></ul><p>The programmers are there to stick them into the holes of the abstraction. If you’re generating excel tables programatically from a database, or want your website to synchronize with a price list from a Googledoc, you need some programmers to duct-tape the systems together in unexpected ways (I’m working hard to stay away from shit-based metaphors, but feel free to make one yourself). These systems have a long train of backwards compatibility, they are a massive overkill for the job, but hey, they work just well enough.</p><p>I’m enraged by the lack of attention to static website generators. The idea is beautiful: pipe some markdowns through a template, get a set of static HTMLs and resources that can be host anywhere for, like, free! Why do people make their websites in Wordpress — have a MySQL database at work pushing the limits of storing static data, and PHP, rendering the pages at every request. Oh dear, the system was supposed to write blogs — how did they ever manage to bend it into e-commerce, landing pages and ERP front-ends?</p><p>No, I do know the answer to that — just hit a freelance farm to find a bunch of schoolchildren who can make you something that looks like a website in a week, for $50. I wouldn’t consider disrupting a business with that low profit margin — and who would?</p><h2 id="And-also"><a href="#And-also" class="headerlink" title="And also"></a>And also</h2><p>On Thursday I was watching my TV when the electricity died. It spent the evening randomly switching it on and off, then got stuck loading forever. The philips tech support was very sympathetic. “There’s some very high tech in there — a whole embedded system! How in the world did you expect it to survive the electricity shutdown?” they said. And yeah, sure, what did I expect from a system that had a piece of software in it?</p><figure><br>  <iframe style="margin: 0 auto; display: block; max-width: 100%" width="560" height="315" src="https://www.youtube.com/embed/-eREiQhBDIk?rel=0&amp;start=230" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><br>  <div style="text-align: center; color: #666">Here’s what I (and Nikita, and even Uncle Bob lately) think of software</div><br></figure><p>Really, I should assume I write code at least marginally better-than-average and get into programming education. There’s a horrible shortage of material on learning actual programming (not “How to Use Technology X to Solve Problem Y”-style things) out there. I must to fight as well as I possibly can. You must, too (yes, you, the guy who actually read this all).</p><hr><p>You’ve just seen a weekly snapshot of my thoughts pile. While taking another look at this website’s design to see if the the navigation is obscure enough to prevent the users from noticing the other posts (it probably is; I don’t think i’m changing it just yet) I noticed something horrible.</p><p>The blog’s address has <em>thoughts pile</em> in it. How is that name appropriate for the smart, boring and technical stuff I’ve come to post? I need to give the place some wildness it deserves. <em>Klyukovka, ay, igray Balalaechka!</em> Writing messy speculative posts is far more entertaining!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the midst of my September job hop I headed to Kazan for the weekend. I don’t know exactly why — probably because I could. I had a hote
      
    
    </summary>
    
    
      <category term="programming" scheme="https://thoughtspile.github.io/tags/programming/"/>
    
      <category term="life" scheme="https://thoughtspile.github.io/tags/life/"/>
    
      <category term="thoughtspile" scheme="https://thoughtspile.github.io/tags/thoughtspile/"/>
    
      <category term="depression" scheme="https://thoughtspile.github.io/tags/depression/"/>
    
  </entry>
  
  <entry>
    <title>Not Sucking at TypeScript: 3 Tips</title>
    <link href="https://thoughtspile.github.io/2018/09/22/typescript-unsuck-guide/"/>
    <id>https://thoughtspile.github.io/2018/09/22/typescript-unsuck-guide/</id>
    <published>2018-09-22T13:37:41.000Z</published>
    <updated>2018-10-04T17:00:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have spent three years developing in TypeScript, but sometimes it is owerwhelming. I’m sitting there with all those little “fuck-fuck-fucks” in my head, thinking of how I’d great it would be to burn the annotations, change the extensions to <code>.js</code> and get out of this nighmare already. But hey, if used properly, TS makes you happy, not depressed! Here are my top 3 tips to ease the pain.</p><h2 id="Let-TS-do-its-type-inference"><a href="#Let-TS-do-its-type-inference" class="headerlink" title="Let TS do its type inference"></a>Let TS do its type inference</h2><p>Here’s a sample typescript fragment from one of my projects:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxNumber</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> max: <span class="built_in">number</span> = -<span class="literal">Infinity</span>;</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">x: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; max) &#123;</span><br><span class="line">      max = x;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But TS compiler is really good at deducing types, so you don’t to be that explicit! TS deduces types from:</p><ul><li>initial values: <code>const x = 10</code> is enough, no need for <code>const x: number = 10;</code>. This also works on default values, as in <code>(x = false) =&gt; !x</code>;</li><li>array method types (any generic specifications, really): if <code>arr</code> is <code>number[]</code>, than x in  <code>arr.forEach(x =&gt; ...)</code> is obviously a <code>number</code>;</li><li>return values: in our example, TS knows pretty well that <code>max</code> is a <code>number</code>, so the function returns a <code>number</code>.</li></ul><p>So, our examle only needs one type annotation:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxNumber</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> max = -<span class="literal">Infinity</span>;</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; max) &#123;</span><br><span class="line">      max = x;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As a bonus, once we the annotations do not duplicate, we can easily change types without having to fix half a file. In our example, we changing <code>arr</code> to <code>string[]</code> immediately shows that we must also change the initial value of <code>max</code> to a string, <code>&#39;&#39;</code>.</p><p>As a rule of thumb, we only need explicit type annotations for:</p><ul><li>Function parameters: <code>(x: number, y: number) =&gt; x + y;</code>. As we’ve seen, default values will also do: <code>(x = 0, y = 0) =&gt; x + y;</code>.</li><li>Empty containers: <code>private users: IUser[] = [];</code>. TS does not see an item, and can’t know its type.</li><li>Values coming from outside the codebase. This one’s trickier, but think af an API call: <code>get&lt;IUser[]&gt;(&#39;/users&#39;)</code>.</li><li>(Yes, there are other cases, you’ll know it when you see one, don’t get mad at me).</li></ul><p><img src="/images/ts-just-enough.png" alt=""></p><p>Generally, annotate as few types as you can, then check the IDE hints to see if TS got it right. If not, help him.</p><h2 id="Sometimes-just-let-types-go"><a href="#Sometimes-just-let-types-go" class="headerlink" title="Sometimes, just let types go"></a>Sometimes, just let types go</h2><p>I’m absolutely guilty of this one: I’ve spent a day once typing a tricky low-level canvas util. Always remember that TS is supposed to help you, not stand in your way.</p><p>If you find yourself describing an especialy tricky type — a generic generic, or a polymorphic variadic function — stop and think if you really need it. Maybe the logic is just too obscure, and the fancy typings are just a symptom. Maybe you only use that function in one place, and it already works, so what’s the use?</p><p>With TS, you always have an easy way out — there’s no shame in dropping an <code>any</code> if it saves you a day! An explicit <code>any</code> is better than implicit beacuse if you’re feeling static on a Friday afternoon, you can grep your codebase for <code>/: any/</code> and see if you can fix a couple.</p><h2 id="Prevent-compilation-error-buildup-with-global-overrides"><a href="#Prevent-compilation-error-buildup-with-global-overrides" class="headerlink" title="Prevent compilation error buildup with global overrides"></a>Prevent compilation error buildup with global overrides</h2><p><img src="/images/ts-errors.png" alt=""></p><p>Accidentally you slip and ignore a TS error. The code still compiles, no harm done! But once your compilation log is several 10+ of bloody redness, it’s lost as a source of information about global project correctness. The generic advice is “look if it’s a real error, then either fix or re-type it”, but yes, I do have something specific in mind. Global type overrides are your friends!</p><p>Sure your browser targets support <code>&lt;Array&gt;.find</code>, or have a polyfill ready? Override the global <code>Array</code> type (courtesy of <a href="https://stackoverflow.com/questions/31455805/find-object-in-array-using-typescript" target="_blank" rel="noopener">user75525 at SO</a>)!<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Array&lt;T&gt; &#123;</span><br><span class="line">  find(predicate: <span class="function">(<span class="params">search: T</span>) =&gt;</span> <span class="built_in">boolean</span>): T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Working on a legacy project with lodash loaded globally via a CDN? Throw it in:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> lodash <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="keyword">declare</span> global &#123;</span><br><span class="line">  <span class="keyword">const</span> _: <span class="keyword">typeof</span> lodash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Using an obscure jQuery plugin? Global type overrides got you covered:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> JQuery &#123;</span><br><span class="line">  webuiPopover: <span class="function">(<span class="params">o: <span class="built_in">any</span></span>) =&gt;</span> JQuery;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Love-the-types-you’re-with"><a href="#Love-the-types-you’re-with" class="headerlink" title="Love the types you’re with"></a>Love the types you’re with</h2><p>Hope this tips will help you be less depressed and more productive when working with TypeScript.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have spent three years developing in TypeScript, but sometimes it is owerwhelming. I’m sitting there with all those little “fuck-fuck-f
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://thoughtspile.github.io/tags/javascript/"/>
    
      <category term="programming" scheme="https://thoughtspile.github.io/tags/programming/"/>
    
      <category term="tips" scheme="https://thoughtspile.github.io/tags/tips/"/>
    
      <category term="typescript" scheme="https://thoughtspile.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Simpifying AngularJS controllers with ES5 get / set</title>
    <link href="https://thoughtspile.github.io/2018/09/20/angularjs-service-property-getter/"/>
    <id>https://thoughtspile.github.io/2018/09/20/angularjs-service-property-getter/</id>
    <published>2018-09-20T14:04:06.000Z</published>
    <updated>2018-11-10T11:36:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been developing an AngularJS application for the past year — and <em>voila!</em> here I am, alive and well. I’m not some crazy old fuck who thinks AngularJS is a promising new technology. Nor have I been waiting to publish this post for 3 years. It’s just how things turned up for me. Since there’s no shortage of AngularJS apps in the wild, I’ve decided to share some tips for taming Angular (the Terrible one) and staying sane (yes you can).</p><h2 id="The-context-—-where-am-I-Help"><a href="#The-context-—-where-am-I-Help" class="headerlink" title="The context — where am I? (Help)"></a>The context — where am I? (Help)</h2><p>Some context first. I spent two years developing React front-ends. When offered a job on an AngularJS app, I was scared at first — we’ve all spent years making fun of it. The team lead was shaking a full Vue rewrite around not to scare the candidates off. The idea of playing around with Vue felt good (I’m a playful coder, don’t judge me), but Joel Spolsky’s <a href="https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/" target="_blank" rel="noopener">spooky story</a> of Netscape’s full rewrite had been growing on me for years. And well, there were <em>features</em> to be made, no time for the geek fun.</p><p>Now I’m gone from the project (no relation to the tech stack whatsoever), and the app is still moslty AngularJS. It’s in a good shape, and has all the modern things: webpack, babel, a sprinkle of React here and there. I feel I’ve made a good job by focusing on the business stuff.</p><h2 id="The-Problem-—-what’s-wrong"><a href="#The-Problem-—-what’s-wrong" class="headerlink" title="The Problem — what’s wrong?"></a>The Problem — what’s wrong?</h2><p>So, what was it I was gonna tell you kids about? We have a service that holds the list of users. Here it is, with all the ES6 exquisiteness:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  load() &#123;</span><br><span class="line">    <span class="keyword">return</span> get(<span class="string">'/users'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, the component. All basic, too, just shows a list of users:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(userService) &#123;</span><br><span class="line">    <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    <span class="keyword">this</span>.userService.load().then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">angular.component(<span class="string">'userList'</span>, &#123;</span><br><span class="line">  template: <span class="string">`&lt;user-card ng-repeat="user in $ctrl.users" user="user"&gt;&lt;/user-card&gt;`</span>,</span><br><span class="line">  controller: UserListController</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>But we can also add a user. Once the thing is done, we should update the list — it’s surely changed. But — oh no! — we have no way of doing it, because the data is stuck in <code>UserListController</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  load() &#123;</span><br><span class="line">    <span class="keyword">return</span> get(<span class="string">'/users'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addUser(user) &#123;</span><br><span class="line">    <span class="keyword">return</span> post(<span class="string">'./users'</span>, user).then(<span class="comment">/* oops */</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-classic-solution"><a href="#The-classic-solution" class="headerlink" title="The classic solution"></a>The classic solution</h2><p>The classic, ES3-level <a href="https://www.justinobney.com/keeping-angular-service-list-data-in-sync-among-multiple-controllers/" target="_blank" rel="noopener">solution put forward by Justin Obney</a> is to make <code>users</code> the property of <code>UserService</code> and never reassign it, only mutate (mute? mutilate?). The controller references the service property, and the angular view watch works, since <code>users</code> are shared by reference. Here’s the code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.users = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  load() &#123;</span><br><span class="line">    <span class="keyword">return</span> get(<span class="string">'/users'</span>).then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">      angular.copy(users, <span class="keyword">this</span>.users);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addUser(user) &#123;</span><br><span class="line">    <span class="keyword">return</span> post(<span class="string">'./users'</span>, user).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.load());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(userService) &#123;</span><br><span class="line">    <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    <span class="keyword">this</span>.users = <span class="keyword">this</span>.userService.users;</span><br><span class="line">    userService.load();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are three problems with this solution:</p><ol><li>It’s fragile: if we accidentally reassign <code>users</code> either in the controller or the service, the whole scheme breaks down.</li><li>Instead of using normal javascript, you dance around the reference. The result of a well-behaved library function that does not mutate the data must be merged back into the original object.</li><li>The suggested way of caring for the reference, <code>angular.copy</code>, is angular-specific and makes a deep copy.</li></ol><p>We can work around the first issue using TypeScript’s <code>readonly</code> properties, but the reference dance persists. Using TS2+ over AngularJS is a bit bipolar, too (exacly what I used on the project, but that’s beside the point).</p><p>Luckily, we can do much better — let me show you how.</p><h2 id="The-get-set-solution"><a href="#The-get-set-solution" class="headerlink" title="The get / set solution"></a>The get / set solution</h2><p>My solution relies on ES5 getters. Compatibility analysis, if I please? ES5 is nothing hot, it’s been around long enough to be considered the web standard. People who use IE9 are probably used to the web looking and working strange. Considering a modern framework — Vue or React? They require IE9+ anyways. So yes, we can use ES5 safely.</p><p>We do whatever we want to the service property, and declare a getter for it on the controller:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.users = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  load() &#123;</span><br><span class="line">    <span class="keyword">return</span> get(<span class="string">'/users'</span>).then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addUser(user) &#123;</span><br><span class="line">    <span class="keyword">return</span> post(<span class="string">'./users'</span>, user).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.load());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(userService) &#123;</span><br><span class="line">    <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    userService.load();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get users() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.userService.users;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Digest works normally. Mutate the <code>users</code> array in the service and the views update. Reassign in the service — the views still update. Mutate the array in a controller — the views update (a bug, not a feature? Maybe, but that’s how it goes). We can’t accidentally reassign the controller property because it only has a getter. And we have zero angular-specific code. The trick is backwards-compatible with the old one, so we needn’t rewrite the service all at once. Nice!</p><h2 id="What-good-have-we-done"><a href="#What-good-have-we-done" class="headerlink" title="What good have we done?"></a>What good have we done?</h2><p>Is this the holy grail? Certainly not. It requires some boilerplate, a 4-line getter per controller. We’re still stuck with the shaky shared ownersip: every controller can change the object. But this is an improvement over the old way.</p><p>For completeness, here are three other solutions off the top of my head:</p><ol><li>Bind to service from the template: <code>&lt;user-card ng-repeat=&quot;user in $ctrl.userService.users&quot;&gt;&lt;/user-card&gt;</code>. Bad, because it breaks abstraction layering — the view should not touch the service.</li><li>Make the service an event bus, do <code>this.trigger(&#39;users.update&#39;, users);</code> on every users change. Vanilla implementation is fragile (never forget to call <code>trigger</code> on update), but this might work with some structure around (though at this point we might as well stick mobx into the service).</li><li><p><code>$scope.$watch(() =&gt; this.userService.users, users =&gt; this.users = users)</code>. The effect is the same as in my solution, but at the cost of an extra digest iteration. Fall back to this one for ES3 complicance.</p><p>Never say never to AngularJS — who knows how it’s gonna turn out. Drop a comment if the topic interests you! I still have a couple of AngularJS tricks down my sleeve to keep you safe. ES6 modules? String templates? CSS modules? Yes you can.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’ve been developing an AngularJS application for the past year — and &lt;em&gt;voila!&lt;/em&gt; here I am, alive and well. I’m not some crazy old f
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://thoughtspile.github.io/tags/javascript/"/>
    
      <category term="programming" scheme="https://thoughtspile.github.io/tags/programming/"/>
    
      <category term="frontend" scheme="https://thoughtspile.github.io/tags/frontend/"/>
    
      <category term="angularjs" scheme="https://thoughtspile.github.io/tags/angularjs/"/>
    
      <category term="tips" scheme="https://thoughtspile.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>Programming is Like Writing</title>
    <link href="https://thoughtspile.github.io/2018/09/19/Programming-is-like-writing/"/>
    <id>https://thoughtspile.github.io/2018/09/19/Programming-is-like-writing/</id>
    <published>2018-09-19T12:04:27.000Z</published>
    <updated>2018-09-19T12:49:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been playing around with this idea for a while. The more I got into writing (Strunk-White and William Zinsser’s “On Writing Well” are most suggested), the more similarities to software development I found. Now I’m ready to put it forward: <em>writing code is still writing,</em> or <em>writing code is writing,</em> or maybe even “you’re <strong>writing</strong> code”.</p><p>After some online research this analogy does not seem as fresh. Jeff Atwood in <a href="https://blog.codinghorror.com/coding-its-just-writing/" target="_blank" rel="noopener">Coding: It’s Just Writing</a> notes the similarities between William Strunk’s tips on writing and programming best practices, and then there’s Bert Wagner <a href="https://hackernoon.com/writing-good-code-is-like-writing-a-novel-33973645be01" target="_blank" rel="noopener">talking</a> about the psychological similarities between coding and writing. On the other hand, the topic does not seem completely dead either, so watch me take another stab on it!</p><h2 id="You-produce-text-not-really"><a href="#You-produce-text-not-really" class="headerlink" title="You produce text (not really)"></a>You produce text (not really)</h2><p>On the surface, the end result of both writing and coding is text (as in “a sequence of words with some meaning”). However, this view breaks down once you think about it.</p><p>People in the software industry know that the value they provide is in solving <em>business problems</em> through code, not in writing code per se. Yet I don’t feel “shoving shitcode on top of shitcode to make things work” is the way to go. Let’s ban the whole business / technical argument for a minute.</p><figure><br>  <img style="border: 1px solid #eee;" src="/images/hexo-source.png"><br>  <div style="color: #666; text-align: center;">This is not why people like open source</div><br></figure><p>The users do not care for the code — they only see the GUI (or an API). What code you wrote in there is irreleveant as long as it works. When your users start caring about the code, it’s either because they want to learn from it, or because you screwed up and they have to dive in and debug. Not the primary use cases, huh?</p><p>But writers do indeed write texts. Or do they? A piece of writing is only valuable once you put it into your head and think about it. Very much like running a program, isn’t it? A good book is good because of the feelings and ideas it gives you, not because of the arrangement of words. Still not convinced? Think about play- and screenwriting: there is no <em>text</em> in a movie, yet the writing itself sure as hell is there.</p><p>Now, who carese about the word arrangements? Literature students do: they learn the ways to use words for the desired effect. When the text is so bad you can’t make sense of it (some lawyer mumbo-jumbo), you read it over and over again — isn’t it “text debugging”? Bingo on both!</p><h2 id="You’re-transmitting-intention-through-text"><a href="#You’re-transmitting-intention-through-text" class="headerlink" title="You’re transmitting intention through text"></a>You’re transmitting intention through text</h2><p>And text is not even the best medium for what we the writers (see what I did there?) are trying to acheive. But we don’t know any better, so we settled on it somehow. We just want to communicate the ideas in our heads: algorithms, storylines, all is one.</p><p><img src="/images/tintin-grasshopper.png" alt=""></p><p>The attempts to run away from the text? Check! Visual programming and comic books, respectively. However, people do not take these too seriously. Don’t grumble, give these some time and they will outshine the poor old text.</p><h2 id="People-think-complex-and-long-is-cool-it-is-not"><a href="#People-think-complex-and-long-is-cool-it-is-not" class="headerlink" title="People think complex and long is cool (it is not)"></a>People think complex and long is cool (it is not)</h2><p>What makes a writer good? It must be all those fancy baroque wordings! I heard James Joyce was good, and you can barely make sense of his books. The more grotesque plot twists, the merrier. But didn’t the greatest writers always talk about working hard to keep their works simple?</p><p>Now, what makes a programmer good? It must be all the fancy optimization hacks! How cool, this dude uses Singletons, Message Queues and Service Workers! No one can understand this code — what a work of genius! Sounds familiar? If you program, you know it’s bullshit. The best code for the job is the simplest code for the job — it’s easy to follow and does not strangle the performance with all the unnecessary layers of abstraction.</p><h2 id="Teamwork-is-limited-it-is-still-there"><a href="#Teamwork-is-limited-it-is-still-there" class="headerlink" title="Teamwork is limited (it is still there)"></a>Teamwork is limited (it is still there)</h2><p>Ten writers working on a book won’t write it ten times better or faster than one. Similarly, if you give one task to ten programmers with no management, they would drown in merge conflicts before delivering.</p><p><img style="border: 1px solid #eee;" src="/images/maxwell-perkins.jpg"></p><p>However, teamwork does exist in both industries, and is strikingly similar. Our code reviews = writers’ proofreading and editing. I remember Hemmingway’s quote about how cool his editor was, but I can’t seem to find that one now that there’s some <em>proofreading</em> software called <em>Hemmingway</em> — hope it edits sober. And you know how the code collapses into anarchy once there’s no one to stop you and watch with a clear eye.</p><h2 id="The-conclusion-I-am-so-serious"><a href="#The-conclusion-I-am-so-serious" class="headerlink" title="The conclusion (I am so serious)"></a>The conclusion (I am so serious)</h2><p>And I feel that as exploring other areas — art, cooking, construction, retail, what not — I will find even more structure to all of these. So make sure to come by when I publish more posts on “Programming is like Making Pasta”, “Hackathons are Like Doodling” and “Working in Outsource is Like Being an Illegal Plumber”.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’ve been playing around with this idea for a while. The more I got into writing (Strunk-White and William Zinsser’s “On Writing Well” ar
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Quick Tip: docx is a zip Archive</title>
    <link href="https://thoughtspile.github.io/2018/07/14/docx-is-a-zip-archive/"/>
    <id>https://thoughtspile.github.io/2018/07/14/docx-is-a-zip-archive/</id>
    <published>2018-07-14T11:33:41.000Z</published>
    <updated>2018-12-01T10:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Microsof Office’s <code>docx</code> files are actually zip archives with a bunch of XMLs and all the attached media. Super useful, everyone should know it!</p><p>When I tell my colleagues, friends, or students about it, they don’t take me seriously the first time. So, here we go again. If you have a docx (or xlsx, or pptx) file, you can unzip it with <code>unzip proj.docx -d proj</code> or any other unarchiver and get a folder with all the stuff that makes up the document:</p><p><img src="/images/unzipped-docx.png" alt=""></p><p>From here, you can:</p><ul><li>quickly grab all the media from  <code>word/media</code></li><li>work with the document (<code>word/document</code>) via an XML parser (or grep / sed, but it’s a secret)</li></ul><p>And do all the other marvellous stuff — no Office or even GUI needed. Now go and spread the light of this newfound knowledge and never complain about docx again!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Microsof Office’s &lt;code&gt;docx&lt;/code&gt; files are actually zip archives with a bunch of XMLs and all the attached media. Super useful, everyo
      
    
    </summary>
    
    
      <category term="microsoft, zip, tips" scheme="https://thoughtspile.github.io/tags/microsoft-zip-tips/"/>
    
  </entry>
  
  <entry>
    <title>Advanced Promise Coordination: Rate Limiting</title>
    <link href="https://thoughtspile.github.io/2018/07/07/rate-limit-promises/"/>
    <id>https://thoughtspile.github.io/2018/07/07/rate-limit-promises/</id>
    <published>2018-07-07T07:11:13.000Z</published>
    <updated>2018-07-07T07:56:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>In the <a href="/2018/06/20/serialize-promises/">previous post</a> we learnt to serialize<br>and concurrecy-limit promise-based operations in js. This time we dive further<br>and handle rate limiting.</p><h2 id="What-Exactly-to-Rate-Limit"><a href="#What-Exactly-to-Rate-Limit" class="headerlink" title="What Exactly to Rate Limit"></a>What Exactly to Rate Limit</h2><p>Let’s get terminological matters out of the way first. Promises represent operations<br>that last a certain amount of time, while rate limiting is applied to discrete events.<br>Over its life, a promise starts and terminates (with a success or a failure, not<br>important now). It makes most sense to rate limit promise creations (starts).<br>Rate limiting promise resolutions can be done by appending a start-rate-limited<br>promise onto the end of the running promise. We could also limit the gap<br>between operations, but I have no idea how that would be useful.</p><h2 id="Rate-vs-concurrency-limiting"><a href="#Rate-vs-concurrency-limiting" class="headerlink" title="Rate vs concurrency limiting"></a>Rate vs concurrency limiting</h2><p>While both rate and concurrency limits are trying to prevent a client from<br>overloading the server by making too many calls too fast, they do not replace<br>one another, and are implemented differently.</p><p>Suppose an API is rate-limited to 1 request per second. Even 1-concurrent requests<br>break the rate limit if they complete in under 1s. On the other hand, if the<br>requests take 3 seconds to complete, we can only have 3 of them running at the same time:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> ...</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>We could derive a bunch of formulae to connect the concurrency, rate and<br>running time of operations, but that’s completely beside the point. The thing to<br>remember here is that without strict guarantees on operation duration you can<br>not replace concurrency limit with rate limit or vice versa.</p><h2 id="Rate-limiting-individual-operations"><a href="#Rate-limiting-individual-operations" class="headerlink" title="Rate limiting individual operations"></a>Rate limiting individual operations</h2><p>The simplest form of rate limiting is “1 operation per N seconds”. This one is<br>straightforward, but first we need a building block — the promise counterpart<br>of <code>setTimeout</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resolveAfter = <span class="function"><span class="params">ms</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">ok</span> =&gt;</span> setTimeout(ok, ms));</span><br></pre></td></tr></table></figure><p><code>resolveAfter</code> is self-explanatory: it returns a promise that resolves after<br>the specified time has elapsed. Now, for the actual rate limiter:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rateLimit1</span>(<span class="params">fn, msPerOp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> wait = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// We use the queue tail in wait to start both the</span></span><br><span class="line">    <span class="comment">// next operation and the next delay</span></span><br><span class="line">    <span class="keyword">const</span> res = wait.then(<span class="function"><span class="params">()</span> =&gt;</span> fn(...a));</span><br><span class="line">    wait = wait.then(<span class="function"><span class="params">()</span> =&gt;</span> resolveAfter(msPerOp));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can, as usual, wrap the promise and call with no worries, the operations<br>are magically delayed:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> slowFetch = rateLimit1(fetch, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">Promise</span>.all(urls.map(<span class="function"><span class="params">u</span> =&gt;</span> slowFetch(u)))</span><br><span class="line">  .then(<span class="function"><span class="params">raw</span> =&gt;</span> <span class="built_in">Promise</span>.all(raw.map(<span class="function"><span class="params">p</span> =&gt;</span> p.json())))</span><br><span class="line">  .then(<span class="function"><span class="params">pages</span> =&gt;</span> <span class="built_in">console</span>.log(pages));</span><br></pre></td></tr></table></figure><p>The 1-rate-limiter can also be elegantly implemented on top of serializer<br>with the pitfall of unnecessarily delaying the first operation:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rateLimit1</span>(<span class="params">fn, msPerOp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> wait = serializePromises(<span class="function"><span class="params">()</span> =&gt;</span> resolveAfter(msPerOp));</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...a</span>) =&gt;</span> wait().then(<span class="function"><span class="params">()</span> =&gt;</span> fn(...a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Rate-limiting-multiple-operations"><a href="#Rate-limiting-multiple-operations" class="headerlink" title="Rate limiting multiple operations"></a>Rate limiting multiple operations</h2><p>Many APIs feature soft rate limits instead: they allow <code>M request per N seconds</code>.<br>That is not equivalent to <code>1 request per N/M seconds</code>! Converting the multiple<br>rate limit into individual one does fulfil the rate limit, but is overly harsh<br>and non-optimal. Let’s see this through examples.</p><h3 id="Difference-from-individual-rate-limit-by-example"><a href="#Difference-from-individual-rate-limit-by-example" class="headerlink" title="Difference from individual rate limit, by example"></a>Difference from individual rate limit, by example</h3><p>Suppose you’re flying a plane, and the airline allows 10 kg of luggage per<br>passenger. If you’re travelling with a girl, and have one 16-kg bag with both<br>your things. At the check-in desk you’re asked to take out half the stuff in<br>your bag to make two 8-kg items. While formally correct, it feels idiotic —<br>you still add the exact same weight to the plane! But now, why would you enforce<br>such a stupid restriction on your own operations if you can do better?</p><p>Closer to the topic, let’s try 2-req-per-2-sec rate limit for operations<br>lasting 2 seconds. If you immediately fire 2 requests, you’re done in 2 seconds:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">----| 2 seconds, all done!</span><br><span class="line">----|</span><br></pre></td></tr></table></figure><p>Converting this into 1-req-per-1-sec delays the second request by 1s, and<br>now the same 2 requests take 3 seconds! You just lost a second for no reason.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">----  | 3 seconds</span><br><span class="line">  ----|</span><br></pre></td></tr></table></figure><h3 id="Understanding"><a href="#Understanding" class="headerlink" title="Understanding"></a>Understanding</h3><p>To understand what we should do, let’s have a closer look at the 1-rate-limit.<br>We essentially make a queue of promises that never resolve closer than <code>delay</code><br>apart. We use the resolutions to start the next operations, and don’t care<br>about its termination at all:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*--*--     *--*--</span><br></pre></td></tr></table></figure><p>This view extends to N-rate-limit: create N independent queues and put these<br>into a circular queue (yes, a queue of queues makes a good <em>in Soviet Russia</em><br>joke):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*--*-- *--*--</span><br><span class="line"> *-- *--*--  *--</span><br><span class="line"> *--  *-- *--    *--</span><br></pre></td></tr></table></figure><p>The individual queues are unchanged, and never fire more than 1 operation per N<br>seconds. Thus, M queues can fire at most M operations during the window.</p><h3 id="Implementing"><a href="#Implementing" class="headerlink" title="Implementing"></a>Implementing</h3><p>With this plan in mind, we can generalize the implementation:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rateLimit</span>(<span class="params">fn, windowMs, reqInWindow = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// A battery of 1-rate-limiters</span></span><br><span class="line">  <span class="keyword">const</span> queue = _.range(reqInWindow).map(<span class="function"><span class="params">()</span> =&gt;</span> rateLimit1(fn, windowMs));</span><br><span class="line">  <span class="comment">// Circular queue cursor</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// to enqueue, we move the cursor...</span></span><br><span class="line">    i = (i + <span class="number">1</span>) % reqInWindow;</span><br><span class="line">    <span class="comment">// and return the rate-limited operation.</span></span><br><span class="line">    <span class="keyword">return</span> queue[i](...a);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Preventing-queue-overflow"><a href="#Preventing-queue-overflow" class="headerlink" title="Preventing queue overflow"></a>Preventing queue overflow</h2><p>Just as before, we run into problems if the operations are consistently inserted<br>into the queue faster than the rate limit. The solution is the same: once the<br>queue exceeds the specified number of items, we immediately reject the incoming<br>operations.</p><h2 id="Combining-with-concurrency-limiting"><a href="#Combining-with-concurrency-limiting" class="headerlink" title="Combining with concurrency limiting"></a>Combining with concurrency limiting</h2><p>Now that we know how to limit both the rate and the number of simultaneously<br>running operations, and since neither is a substitute for another, we want a<br>way to combine the two limits. But can we build the joint rate/concurrency<br>limiter by composing the primitive limiters? Turns out we can, but should carefully<br>choose the order.</p><p><code>rateLimit(concurrencyLimit(fetch, N), ms)</code>, limits the rate at which the<br>operations enter the concurrency-limit queue. Serialized (1-concurrent) promises<br>rate-limited to 1 second break this combination. Suppose the first operation runs for<br>2 seconds, and during that time we throw 2 fast operations, O_2 and O_3 (say,<br>10 ms each) into the serializer. Instead of waiting for 1 second, the O_3 starts<br>right after O_2 completes, or 10ms after it starts, breaking the rate limit.</p><p><code>concurrencyLimit(rateLimit(fetch, ms), N)</code> limits the number of operations in<br>the rate-limit queue. Since the rate limiter only sees N operations at a time,<br>it has no chance to fire more than N, which is exactly what we want.<br>Hence, <strong>Chaining Rule 1: limit concurrency before rate.</strong></p><h2 id="Use-cases"><a href="#Use-cases" class="headerlink" title="Use cases"></a>Use cases</h2><p>The classic and most appropriate rate-limiting use case is for API requests.<br>But now that you know the pattern, you will see it in your own tasks and,<br>hopefully, use it ;-)</p><p>Promise-based rate limiting is a great way to quickly hack together a safe API<br>wrapper without depending on the underlying HTTP / TCP / WebSocket client.</p><p>Frankly, other use cases I can come up with off the top of my head (render<br>throttling and preventing too many e-mail notifications) are better served by<br>batching. Maybe, you’ll have better luck.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>We’ve learnt to rate-limit promise-based APIs, both for the simple<br>“1-action-per-N-seconds” and the more general M-actions case. Together with the<br>previously discussed concurrency limiter, these patterns allow us to build robust<br>service gateways with node.js, safely call external APIs and do all the other<br>things you come up with.</p><p>Planning note: I’ve decided to throw away the excessively tricky part on load<br>balancing and go with super fun and useful posts on <em>batching</em> and <em>handling failure</em>.<br>I have RSS now, so be sure to stay tuned!</p><p><strong>Advanced Promise Coordination Series</strong></p><ul><li><a href="/2018/06/20/serialize-promises/">Serialization and Concurrency Limiting</a></li><li><a href="/2018/07/07/rate-limit-promises/">Rate Limiting</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the &lt;a href=&quot;/2018/06/20/serialize-promises/&quot;&gt;previous post&lt;/a&gt; we learnt to serialize&lt;br&gt;and concurrecy-limit promise-based operation
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://thoughtspile.github.io/tags/javascript/"/>
    
      <category term="programming" scheme="https://thoughtspile.github.io/tags/programming/"/>
    
      <category term="promises" scheme="https://thoughtspile.github.io/tags/promises/"/>
    
      <category term="high availability" scheme="https://thoughtspile.github.io/tags/high-availability/"/>
    
  </entry>
  
  <entry>
    <title>Advanced Promises Coordination: Serialization and Concurrency Limiting</title>
    <link href="https://thoughtspile.github.io/2018/06/20/serialize-promises/"/>
    <id>https://thoughtspile.github.io/2018/06/20/serialize-promises/</id>
    <published>2018-06-20T09:42:08.000Z</published>
    <updated>2018-07-07T07:52:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’m sure you can chain promises with <code>doBefore().then(() =&gt; doAfter())</code> and even<br>run multiple promises in parallel using <code>Promise.any</code>. However, chaining an<br>unknown count of homogenous promises is trickier. Let me teach you to serialze<br>promises like a pro!</p><p>Suppose we want a list of all the cafes in a mid-sized european country.However,<br>the API only lets you query the cafes by city. No problem — we have a list of<br>all the cities, and will send a request for each one, then assemble the results.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cities = [</span><br><span class="line">  <span class="string">"Abertamy"</span>,</span><br><span class="line">  <span class="string">"Adamov (Blansko District)"</span>,</span><br><span class="line">  <span class="string">"Aš"</span>,</span><br><span class="line">  <span class="string">"Bakov nad Jizerou"</span>,</span><br><span class="line">  <span class="string">"Bavorov"</span>,</span><br><span class="line">  <span class="string">"Bechyně"</span>,</span><br><span class="line">  <span class="string">"Bečov nad Teplou"</span>,</span><br><span class="line">  <span class="string">"Bělá nad Radbuzou"</span>,</span><br><span class="line">  <span class="string">"Bělá pod Bezdězem"</span>,</span><br><span class="line">  <span class="comment">// ... and 200 more</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> loadCafes = <span class="function"><span class="params">city</span> =&gt;</span> fetch(<span class="string">`api.fivecircle.com/city/<span class="subst">$&#123;city&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h2 id="How-Not-to-Chain-Promises"><a href="#How-Not-to-Chain-Promises" class="headerlink" title="How Not to Chain Promises"></a>How Not to Chain Promises</h2><p>The first naive attempts are no good:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All gone in a glimpse of eye:</span></span><br><span class="line"><span class="built_in">Promise</span>.all(areas.map(loadCafes)).then(<span class="function"><span class="params">cafes</span> =&gt;</span> db.save(_.flatten(cafes)));</span><br><span class="line"><span class="comment">// Still not good</span></span><br><span class="line">areas.forEach(<span class="function"><span class="params">area</span> =&gt;</span> &#123;</span><br><span class="line">  loadCafes(area).then(storeData);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// More of the same</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> area <span class="keyword">in</span> areas) &#123;</span><br><span class="line">  loadCafes(area).then(storeData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Since promises start executing once created, each of these options fires all<br>the requests at once. With sane rate limiting restrictions, it will fail.<br>A less elaborate server could even crash.</p><p>We could, of course, use <code>await</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cafes = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> area <span class="keyword">of</span> areas) &#123;</span><br><span class="line">  cafes = cafes.concat(<span class="keyword">await</span> loadCafes(area));</span><br><span class="line">&#125;</span><br><span class="line">storeData(cafes);</span><br></pre></td></tr></table></figure><p>But I’m not a fan of this syntax — the code is now arguably C-like. I also<br>find error handling in promises cleaner. And now we have more preprocessing to do<br>for the code to work, which is nothing to be proud of. So let’s go on and write this<br>in pure promises instead.</p><h2 id="Explicit-Serialization"><a href="#Explicit-Serialization" class="headerlink" title="Explicit Serialization"></a>Explicit Serialization</h2><p>The best-known trick from this bunch is explicitly chaining an array of promises with<br><code>&lt;Array&gt;.reduce</code>. It works best for fire-and-forget promises, like redux actions:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> actions.reduce(</span><br><span class="line">  (pre, action) =&gt; before.then(<span class="function"><span class="params">()</span> =&gt;</span> action()),</span><br><span class="line">  <span class="built_in">Promise</span>.resolve());</span><br></pre></td></tr></table></figure><p>However, assembling return values is a bit awkward:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">areas.reduce(<span class="function">(<span class="params">before, area</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> before.then(<span class="function"><span class="params">acc</span> =&gt;</span> loadCafes(area).then(<span class="function"><span class="params">cafes</span> =&gt;</span> acc.concat(cafes)));</span><br><span class="line">&#125;, <span class="built_in">Promise</span>.resolve([])).then(<span class="function"><span class="params">cafes</span> =&gt;</span> db.save(cafes));</span><br></pre></td></tr></table></figure><p>Overall, this is good enough when you have an array of data you want to run the<br>actions on beforehand. But what if you don’t?</p><h2 id="Implicit-Serialization"><a href="#Implicit-Serialization" class="headerlink" title="Implicit Serialization"></a>Implicit Serialization</h2><p>We can actually write a wrapper for arbitrary promise-returning<br>functions that makes any call wait for the previous ones to finish. This wrapper<br>is completely transparent, leaving the function’s interface intact — good for<br>composability. Here it is:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serializePromises</span>(<span class="params">immediate</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// This works as our promise queue</span></span><br><span class="line">  <span class="keyword">let</span> last = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...a</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Catch is necessary here — otherwise a rejection in a promise will</span></span><br><span class="line">    <span class="comment">// break the serializer forever</span></span><br><span class="line">    last = last.catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> immediate(...a));</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can just wrap our function and never have to worry about flooding the API again:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loadCafesSafe = serializePromises(loadCafes);</span><br><span class="line"><span class="built_in">Promise</span>.all(areas.map(<span class="function"><span class="params">a</span> =&gt;</span> loadCafesSafe(a)));</span><br></pre></td></tr></table></figure><p>It’s so easy it doesn’t warrant a library — just five lines of code. And we can<br>take this idea further with…</p><h2 id="Concurrency-Limiting"><a href="#Concurrency-Limiting" class="headerlink" title="Concurrency Limiting"></a>Concurrency Limiting</h2><p>Serialization effectively forces our promises to run in one thread. To make them<br>go faster, we can generalize the serializer to allow not one, but at most N<br>promises to run simultaneously:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">limitConcurrency</span>(<span class="params">immediate, maxConcurrent</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Each element holds its index, or a promise resolving with the index</span></span><br><span class="line">  <span class="keyword">const</span> workers = _.range(maxConcurrent);</span><br><span class="line">  <span class="comment">// Without this serialization, Promise.race would resolve with the same</span></span><br><span class="line">  <span class="comment">// worker whenever a concurrency-limited function was synchronously called</span></span><br><span class="line">  <span class="comment">// multiple times.</span></span><br><span class="line">  <span class="keyword">const</span> findWorker = serializePromises(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.race(workers));</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...a</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// race resolves with the first free worker</span></span><br><span class="line">    <span class="keyword">return</span> findWorker().then(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// and here we start the action and update the worker correspondingly:</span></span><br><span class="line">      <span class="keyword">const</span> promise = immediate(...a);</span><br><span class="line">      workers[i] = promise.then(<span class="function"><span class="params">()</span> =&gt;</span> i, () =&gt; i);</span><br><span class="line">      <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The idea is the same, but we replaced the single <code>last</code> promise with an array of<br>N workers and added some bookkeeping. This code packs promises into threads as<br>tightly as possible, with no idle time.</p><p>Also note that <code>serializePromises</code> is the same as <code>a =&gt; limitConcurrency(a, 1)</code>.</p><p>If you want to impose joint limiting on several arbitrary functions, you can tweak the<br>code — I leave this to you as an exercise ;-)</p><h2 id="Propagating-Rate-Errors"><a href="#Propagating-Rate-Errors" class="headerlink" title="Propagating Rate Errors"></a>Propagating Rate Errors</h2><p>Now that our code manages a promise queue, we can see a potential problem in it.<br>The system can smooth activity spikes without propagating these upstream.<br>However, if the request rate is higher than what the upstream can handle for an<br>extended period of time, our queue can overfill and blow up the memory limit.</p><p>The problem still existed before we added the limiter, but would occurred<br>upstream instead. No wrapper can magically improve service throughput.</p><p>To handle these errors without crashing our process, we can put a hard limit on<br>queue size. Here’s how it can be done for the generic <code>limitConcurrency</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">limitConcurrency</span>(<span class="params">immediate, maxConcurrent, maxQueue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this is our queue counter</span></span><br><span class="line">  <span class="keyword">let</span> queued = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> workers = _.range(maxConcurrent);</span><br><span class="line">  <span class="keyword">const</span> findWorker = serializePromises(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.race(workers));</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (queued &gt;= maxQueue) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Max queue size reached'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    queued += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> findWorker().then(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">      queued -= <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">const</span> promise = immediate(...a);</span><br><span class="line">      workers[i] = promise.then(<span class="function"><span class="params">()</span> =&gt;</span> i, () =&gt; i));</span><br><span class="line">      <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, instead of uncontrollably enqueueing, the coordinator rejects when there’s<br>already too much work ahead. The consumers can handle these errors and retry later.</p><h2 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h2><p>So far we’ve been discussing an example with API requests, and you might argue<br>that concurrency limiting functionality should be provided bt the HTTP client<br>library. That’s true, but the power of our promise-based strategy is its generality.<br>Here are some unorthodox use cases:</p><h3 id="“Sloppy-Transactions”-with-Serialization"><a href="#“Sloppy-Transactions”-with-Serialization" class="headerlink" title="“Sloppy Transactions” with Serialization"></a>“Sloppy Transactions” with Serialization</h3><p>Suppose an action involves reading an external data source, computing on the<br>response and issuing an update. If the source changes between the read and the<br>update, you’ve corrupted your data beyond repair. You can instead wrap the action<br>with our “promise serializer”. Of course, this assumes that the relevant data is only<br>accessed by your wrapper, and only by a single process. You can even build a<br>simple file-based database.</p><h3 id="Prevent-Notification-Flood-with-Concurrency-Limiting"><a href="#Prevent-Notification-Flood-with-Concurrency-Limiting" class="headerlink" title="Prevent Notification Flood with Concurrency Limiting"></a>Prevent Notification Flood with Concurrency Limiting</h3><p>A front-end idea. You probably have a notification area somewhere on<br>the screen. However, if a large batch of notifications just arrived, the users are<br>likely to miss some of those. But now you can treat the currently visible<br>notifications as the running threads and apply <code>limitConcurrecny</code>!</p><p>A similar use case for modal windows uses serialized promises — you can’t<br>show multiple modals at the same time, but now you can enqueue the next one<br>instead.</p><h3 id="Web-Worker-Thread-Pool"><a href="#Web-Worker-Thread-Pool" class="headerlink" title="Web Worker Thread Pool"></a>Web Worker Thread Pool</h3><p>Finally, time for some cutting-edge tech. If your web app heavily uses web<br>workers for background processing, you can wrap web worker access with a<br>promise-based API, then use our wrapper to limit the number of simultaneously<br>active workers. With several kinds of specialized workers, you might choose to<br>use a multi-factory flavour of our <code>limitConcurrecny</code> instead. I’ll delve<br>deeper into this this case with an upcoming article on load balancing.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>We’ve learnt how to force promises to run consecutively and even to limit the<br>number of pending promises to a specified number. This technique can be used<br>for safer back-end access, and its generality allows to use it for any<br>promise-based API.</p><p>I’m not too good at writing: the topics kept expanding in my head, and I have<br>had a hard time finishing this article. I have two other interesting<br>promise coordination patterns to handle in future articles of this series:</p><ul><li>Rate Limiting</li><li>Load Balancing</li></ul><p>Wish me luck writing these! If you have some tips or want to argue, drop me an<br>e-mail.</p><p><strong>Advanced Promise Coordination Series</strong></p><ul><li><a href="/2018/06/20/serialize-promises/">Serialization and Concurrency Limiting</a></li><li><a href="/2018/07/07/rate-limit-promises/">Rate Limiting</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’m sure you can chain promises with &lt;code&gt;doBefore().then(() =&amp;gt; doAfter())&lt;/code&gt; and even&lt;br&gt;run multiple promises in parallel using
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://thoughtspile.github.io/tags/javascript/"/>
    
      <category term="programming" scheme="https://thoughtspile.github.io/tags/programming/"/>
    
      <category term="promises" scheme="https://thoughtspile.github.io/tags/promises/"/>
    
      <category term="concurrency" scheme="https://thoughtspile.github.io/tags/concurrency/"/>
    
  </entry>
  
</feed>
