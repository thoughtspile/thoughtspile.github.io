<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vladimir Klepov as a Coder</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://thoughtspile.github.io/"/>
  <updated>2018-06-25T20:55:47.000Z</updated>
  <id>https://thoughtspile.github.io/</id>
  
  <author>
    <name>Vladimir Klepov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Advanced Promises Coordination: Serialization and Concurrency Limiting</title>
    <link href="https://thoughtspile.github.io/2018/06/20/serialize-promises/"/>
    <id>https://thoughtspile.github.io/2018/06/20/serialize-promises/</id>
    <published>2018-06-20T09:42:08.000Z</published>
    <updated>2018-06-25T20:55:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’m sure you can chain promises with <code>doBefore().then(() =&gt; doAfter())</code> and even<br>run multiple promises in parallel using <code>Promise.any</code>. However, chaining an<br>unknown count of homogenous promises is trickier. Let me teach you to serialze<br>promises like a pro!</p><p>Suppose we want a list of all the cafes in a mid-sized european country.However,<br>the API only lets you query the cafes by city. No problem — we have a list of<br>all the cities, and will send a request for each one, then assemble the results.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cities = [</span><br><span class="line">  <span class="string">"Abertamy"</span>,</span><br><span class="line">  <span class="string">"Adamov (Blansko District)"</span>,</span><br><span class="line">  <span class="string">"Aš"</span>,</span><br><span class="line">  <span class="string">"Bakov nad Jizerou"</span>,</span><br><span class="line">  <span class="string">"Bavorov"</span>,</span><br><span class="line">  <span class="string">"Bechyně"</span>,</span><br><span class="line">  <span class="string">"Bečov nad Teplou"</span>,</span><br><span class="line">  <span class="string">"Bělá nad Radbuzou"</span>,</span><br><span class="line">  <span class="string">"Bělá pod Bezdězem"</span>,</span><br><span class="line">  <span class="comment">// ... and 200 more</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> loadCafes = <span class="function"><span class="params">city</span> =&gt;</span> fetch(<span class="string">`api.fivecircle.com/city/<span class="subst">$&#123;city&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h2 id="How-Not-to-Chain-Promises"><a href="#How-Not-to-Chain-Promises" class="headerlink" title="How Not to Chain Promises"></a>How Not to Chain Promises</h2><p>The first naive attempts are no good:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All gone in a glimpse of eye:</span></span><br><span class="line"><span class="built_in">Promise</span>.all(areas.map(loadCafes)).then(<span class="function"><span class="params">cafes</span> =&gt;</span> db.save(_.flatten(cafes)));</span><br><span class="line"><span class="comment">// Still not good</span></span><br><span class="line">areas.forEach(<span class="function"><span class="params">area</span> =&gt;</span> &#123;</span><br><span class="line">  loadCafes(area).then(storeData);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// More of the same</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> area <span class="keyword">in</span> areas) &#123;</span><br><span class="line">  loadCafes(area).then(storeData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Since promises start executing once created, each of these options fires all<br>the requests at once. With sane rate limiting restrictions, it will fail.<br>A less elaborate server could even crash.</p><p>We could, of course, use <code>await</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cafes = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> area <span class="keyword">of</span> areas) &#123;</span><br><span class="line">  cafes = cafes.concat(<span class="keyword">await</span> loadCafes(area));</span><br><span class="line">&#125;</span><br><span class="line">storeData(cafes);</span><br></pre></td></tr></table></figure><p>But I’m not a fan of this syntax — the code is now arguably C-like. I also<br>find error handling in promises cleaner. And now we have more preprocessing to do<br>for the code to work, which is nothing to be proud of. So let’s go on and write this<br>in pure promises instead.</p><h2 id="Explicit-Serialization"><a href="#Explicit-Serialization" class="headerlink" title="Explicit Serialization"></a>Explicit Serialization</h2><p>The best-known trick from this bunch is explicitly chaining an array of promises with<br><code>&lt;Array&gt;.reduce</code>. It works best for fire-and-forget promises, like redux actions:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> actions.reduce(</span><br><span class="line">  (pre, action) =&gt; before.then(<span class="function"><span class="params">()</span> =&gt;</span> action()),</span><br><span class="line">  <span class="built_in">Promise</span>.resolve());</span><br></pre></td></tr></table></figure><p>However, assembling return values is a bit awkward:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">areas.reduce(<span class="function">(<span class="params">before, area</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> before.then(<span class="function"><span class="params">acc</span> =&gt;</span> loadCafes(area).then(<span class="function"><span class="params">cafes</span> =&gt;</span> acc.concat(cafes)));</span><br><span class="line">&#125;, <span class="built_in">Promise</span>.resolve([])).then(<span class="function"><span class="params">cafes</span> =&gt;</span> db.save(cafes));</span><br></pre></td></tr></table></figure><p>Overall, this is good enough when you have an array of data you want to run the<br>actions on beforehand. But what if you don’t?</p><h2 id="Implicit-Serialization"><a href="#Implicit-Serialization" class="headerlink" title="Implicit Serialization"></a>Implicit Serialization</h2><p>We can actually write a wrapper for arbitrary promise-returning<br>functions that makes any call wait for the previous ones to finish. This wrapper<br>is completely transparent, leaving the function’s interface intact — good for<br>composability. Here it is:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serializePromises</span>(<span class="params">immediate</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// This works as our promise queue</span></span><br><span class="line">  <span class="keyword">let</span> last = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...a</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Catch is necessary here — otherwise a rejection in a promise will</span></span><br><span class="line">    <span class="comment">// break the serializer forever</span></span><br><span class="line">    last = last.catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> immediate(...a));</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can just wrap our function and never have to worry about flooding the API again:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loadCafesSafe = serializePromises(loadCafes);</span><br><span class="line"><span class="built_in">Promise</span>.all(areas.map(<span class="function"><span class="params">a</span> =&gt;</span> loadCafesSafe(a)));</span><br></pre></td></tr></table></figure><p>It’s so easy it doesn’t warrant a library — just five lines of code. And we can<br>take this idea further with…</p><h2 id="Concurrency-Limiting"><a href="#Concurrency-Limiting" class="headerlink" title="Concurrency Limiting"></a>Concurrency Limiting</h2><p>Serialization effectively forces our promises to run in one thread. To make them<br>go faster, we can generalize the serializer to allow not one, but at most N<br>promises to run simultaneously:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">limitConcurrency</span>(<span class="params">immediate, maxConcurrent</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Each element holds its index, or a promise resolving with the index</span></span><br><span class="line">  <span class="keyword">const</span> workers = _.range(maxConcurrent);</span><br><span class="line">  <span class="comment">// Without this serialization, Promise.race would resolve with the same</span></span><br><span class="line">  <span class="comment">// worker whenever a concurrency-limited function was synchronously called</span></span><br><span class="line">  <span class="comment">// multiple times.</span></span><br><span class="line">  <span class="keyword">const</span> findWorker = serializePromises(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.race(workers));</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...a</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// race resolves with the first free worker</span></span><br><span class="line">    <span class="keyword">return</span> findWorker().then(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// and here we start the action and update the worker correspondingly:</span></span><br><span class="line">      <span class="keyword">const</span> promise = immediate(...a);</span><br><span class="line">      workers[i] = promise.then(<span class="function"><span class="params">()</span> =&gt;</span> i, () =&gt; i);</span><br><span class="line">      <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The idea is the same, but we replaced the single <code>last</code> promise with an array of<br>N workers and added some bookkeeping. This code packs promises into threads as<br>tightly as possible, with no idle time.</p><p>Also note that <code>serializePromises</code> is the same as <code>a =&gt; limitConcurrency(a, 1)</code>.</p><p>If you want to impose joint limiting on several arbitrary functions, you can tweak the<br>code — I leave this to you as an exercise ;-)</p><h2 id="Propagating-Rate-Errors"><a href="#Propagating-Rate-Errors" class="headerlink" title="Propagating Rate Errors"></a>Propagating Rate Errors</h2><p>Now that our code manages a promise queue, we can see a potential problem in it.<br>The system can smooth activity spikes without propagating these upstream.<br>However, if the request rate is higher than what the upstream can handle for an<br>extended period of time, our queue can overfill and blow up the memory limit.</p><p>The problem still existed before we added the limiter, but would occurred<br>upstream instead. No wrapper can magically improve service throughput.</p><p>To handle these errors without crashing our process, we can put a hard limit on<br>queue size. Here’s how it can be done for the generic <code>limitConcurrency</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">limitConcurrency</span>(<span class="params">immediate, maxConcurrent, maxQueue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this is our queue counter</span></span><br><span class="line">  <span class="keyword">let</span> queued = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> workers = _.range(maxConcurrent);</span><br><span class="line">  <span class="keyword">const</span> findWorker = serializePromises(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.race(workers));</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (queued &gt;= maxQueue) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Max queue size reached'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    queued += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> findWorker().then(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">      queued -= <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">const</span> promise = immediate(...a);</span><br><span class="line">      workers[i] = promise.then(<span class="function"><span class="params">()</span> =&gt;</span> i, () =&gt; i));</span><br><span class="line">      <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, instead of uncontrollably enqueueing, the coordinator rejects when there’s<br>already too much work ahead. The consumers can handle these errors and retry later.</p><h2 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h2><p>So far we’ve been discussing an example with API requests, and you might argue<br>that concurrency limiting functionality should be provided bt the HTTP client<br>library. That’s true, but the power of our promise-based strategy is its generality.<br>Here are some unorthodox use cases:</p><h3 id="“Sloppy-Transactions”-with-Serialization"><a href="#“Sloppy-Transactions”-with-Serialization" class="headerlink" title="“Sloppy Transactions” with Serialization"></a>“Sloppy Transactions” with Serialization</h3><p>Suppose an action involves reading an external data source, computing on the<br>response and issuing an update. If the source changes between the read and the<br>update, you’ve corrupted your data beyond repair. You can instead wrap the action<br>with our “promise serializer”. Of course, this assumes that the relevant data is only<br>accessed by your wrapper, and only by a single process. You can even build a<br>simple file-based database.</p><h3 id="Prevent-Notification-Flood-with-Concurrency-Limiting"><a href="#Prevent-Notification-Flood-with-Concurrency-Limiting" class="headerlink" title="Prevent Notification Flood with Concurrency Limiting"></a>Prevent Notification Flood with Concurrency Limiting</h3><p>A front-end idea. You probably have a notification area somewhere on<br>the screen. However, if a large batch of notifications just arrived, the users are<br>likely to miss some of those. But now you can treat the currently visible<br>notifications as the running threads and apply <code>limitConcurrecny</code>!</p><p>A similar use case for modal windows uses serialized promises — you can’t<br>show multiple modals at the same time, but now you can enqueue the next one<br>instead.</p><h3 id="Web-Worker-Thread-Pool"><a href="#Web-Worker-Thread-Pool" class="headerlink" title="Web Worker Thread Pool"></a>Web Worker Thread Pool</h3><p>Finally, time for some cutting-edge tech. If your web app heavily uses web<br>workers for background processing, you can wrap web worker access with a<br>promise-based API, then use our wrapper to limit the number of simultaneously<br>active workers. With several kinds of specialized workers, you might choose to<br>use a multi-factory flavour of our <code>limitConcurrecny</code> instead. I’ll delve<br>deeper into this this case with an upcoming article on load balancing.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>We’ve learnt how to force promises to run consecutively and even to limit the<br>number of pending promises to a specified number. This technique can be used<br>for safer back-end access, and its generality allows to use it for any<br>promise-based API.</p><p>I’m not too good at writing: the topics kept expanding in my head, and I have<br>had a hard time finishing this article. I have two other interesting<br>promise coordination patterns to handle in future articles of this series:</p><ul><li>Rate Limiting</li><li>Load Balancing</li></ul><p>Wish me luck writing these! If you have some tips or want to argue, drop me an<br>e-mail.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’m sure you can chain promises with &lt;code&gt;doBefore().then(() =&amp;gt; doAfter())&lt;/code&gt; and even&lt;br&gt;run multiple promises in parallel using
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://thoughtspile.github.io/tags/javascript/"/>
    
      <category term="promises" scheme="https://thoughtspile.github.io/tags/promises/"/>
    
      <category term="programming" scheme="https://thoughtspile.github.io/tags/programming/"/>
    
      <category term="concurrency" scheme="https://thoughtspile.github.io/tags/concurrency/"/>
    
  </entry>
  
</feed>
